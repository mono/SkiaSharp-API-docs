<Type Name="Blob" FullName="HarfBuzzSharp.Blob">
  <TypeSignature Language="C#" Value="public class Blob : HarfBuzzSharp.NativeObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi Blob extends HarfBuzzSharp.NativeObject" FrameworkAlternate="harfbuzzsharp-1.4" />
  <TypeSignature Language="DocId" Value="T:HarfBuzzSharp.Blob" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Blob extends HarfBuzzSharp.NativeObject" FrameworkAlternate="harfbuzzsharp-2.6;harfbuzzsharp-2.8;harfbuzzsharp-7.3" />
  <AssemblyInfo>
    <AssemblyName>HarfBuzzSharp</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>HarfBuzzSharp.NativeObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Represents a blob of data in memory.</summary>
    <remarks></remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Blob (IntPtr data, int length, HarfBuzzSharp.MemoryMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(native int data, int32 length, valuetype HarfBuzzSharp.MemoryMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:HarfBuzzSharp.Blob.#ctor(System.IntPtr,System.Int32,HarfBuzzSharp.MemoryMode)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>HarfBuzzSharp</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="data" Type="System.IntPtr" Index="0" FrameworkAlternate="harfbuzzsharp-2.6;harfbuzzsharp-2.8;harfbuzzsharp-7.3" />
        <Parameter Name="length" Type="System.Int32" Index="1" FrameworkAlternate="harfbuzzsharp-2.6;harfbuzzsharp-2.8;harfbuzzsharp-7.3" />
        <Parameter Name="mode" Type="HarfBuzzSharp.MemoryMode" Index="2" FrameworkAlternate="harfbuzzsharp-2.6;harfbuzzsharp-2.8;harfbuzzsharp-7.3" />
      </Parameters>
      <Docs>
        <param name="data">The data to wrap.</param>
        <param name="length">The length of the data being wrapped.</param>
        <param name="mode">The memory mode to use.</param>
        <summary>Creates a new <see cref="T:HarfBuzzSharp.Blob" /> instance, wrapping the specified data.</summary>
        <remarks>If there was a problem creating the blob, or if the data length was zero, then an empty blob will be created.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Blob (IntPtr data, int length, HarfBuzzSharp.MemoryMode mode, HarfBuzzSharp.ReleaseDelegate releaseDelegate);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(native int data, int32 length, valuetype HarfBuzzSharp.MemoryMode mode, class HarfBuzzSharp.ReleaseDelegate releaseDelegate) cil managed" />
      <MemberSignature Language="DocId" Value="M:HarfBuzzSharp.Blob.#ctor(System.IntPtr,System.Int32,HarfBuzzSharp.MemoryMode,HarfBuzzSharp.ReleaseDelegate)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>HarfBuzzSharp</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="data" Type="System.IntPtr" Index="0" FrameworkAlternate="harfbuzzsharp-2.6;harfbuzzsharp-2.8;harfbuzzsharp-7.3" />
        <Parameter Name="length" Type="System.Int32" Index="1" FrameworkAlternate="harfbuzzsharp-2.6;harfbuzzsharp-2.8;harfbuzzsharp-7.3" />
        <Parameter Name="mode" Type="HarfBuzzSharp.MemoryMode" Index="2" FrameworkAlternate="harfbuzzsharp-2.6;harfbuzzsharp-2.8;harfbuzzsharp-7.3" />
        <Parameter Name="releaseDelegate" Type="HarfBuzzSharp.ReleaseDelegate" Index="3" FrameworkAlternate="harfbuzzsharp-2.6;harfbuzzsharp-2.8;harfbuzzsharp-7.3" />
      </Parameters>
      <Docs>
        <param name="data">The data to wrap.</param>
        <param name="length">The length of the data being wrapped.</param>
        <param name="mode">The memory mode to use.</param>
        <param name="releaseDelegate">The delegate to invoke when the data is not needed anymore.</param>
        <summary>Creates a new <see cref="T:HarfBuzzSharp.Blob" /> instance, wrapping the specified data.</summary>
        <remarks>If there was a problem creating the blob, or if the data length was zero, then an empty blob will be created.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Blob (IntPtr data, uint length, HarfBuzzSharp.MemoryMode mode, object userData, HarfBuzzSharp.BlobReleaseDelegate releaseDelegate);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(native int data, unsigned int32 length, valuetype HarfBuzzSharp.MemoryMode mode, object userData, class HarfBuzzSharp.BlobReleaseDelegate releaseDelegate) cil managed" />
      <MemberSignature Language="DocId" Value="M:HarfBuzzSharp.Blob.#ctor(System.IntPtr,System.UInt32,HarfBuzzSharp.MemoryMode,System.Object,HarfBuzzSharp.BlobReleaseDelegate)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>HarfBuzzSharp</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="harfbuzzsharp-2.6;harfbuzzsharp-2.8;harfbuzzsharp-7.3">
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="harfbuzzsharp-2.6;harfbuzzsharp-2.8;harfbuzzsharp-7.3">
          <AttributeName Language="C#">[System.Obsolete("Use Blob(IntPtr, int, MemoryMode, ReleaseDelegate) instead.")]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="data" Type="System.IntPtr" />
        <Parameter Name="length" Type="System.UInt32" />
        <Parameter Name="mode" Type="HarfBuzzSharp.MemoryMode" />
        <Parameter Name="userData" Type="System.Object" />
        <Parameter Name="releaseDelegate" Type="HarfBuzzSharp.BlobReleaseDelegate" />
      </Parameters>
      <Docs>
        <param name="data">The data to wrap.</param>
        <param name="length">The length of the data being wrapped.</param>
        <param name="mode">The memory mode to use.</param>
        <param name="userData">The user data to pass to the release delegate.</param>
        <param name="releaseDelegate">The delegate to invoke when the data is not needed anymore.</param>
        <summary>Creates a new <see cref="T:HarfBuzzSharp.Blob" /> instance, wrapping the specified data.</summary>
        <remarks>If there was a problem creating the blob, or if the data length was zero, then an empty blob will be created.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AsSpan">
      <MemberSignature Language="C#" Value="public ReadOnlySpan&lt;byte&gt; AsSpan ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; AsSpan() cil managed" />
      <MemberSignature Language="DocId" Value="M:HarfBuzzSharp.Blob.AsSpan" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>HarfBuzzSharp</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlySpan&lt;System.Byte&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns a span that wraps the data.</summary>
        <returns>Returns the span that wraps the data.</returns>
        <remarks>If the data is released, then the span becomes invalid.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AsStream">
      <MemberSignature Language="C#" Value="public System.IO.Stream AsStream ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IO.Stream AsStream() cil managed" />
      <MemberSignature Language="DocId" Value="M:HarfBuzzSharp.Blob.AsStream" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>HarfBuzzSharp</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns a stream that wraps the data.</summary>
        <returns>Returns the stream that wraps the data.</returns>
        <remarks>If the data is released, then the stream becomes invalid.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:HarfBuzzSharp.Blob.Dispose(System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>HarfBuzzSharp</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</param>
        <summary>Releases the unmanaged resources used by the <see cref="T:HarfBuzzSharp.Blob" /> and optionally releases the managed resources.</summary>
        <remarks>Always dispose the object before you release your last reference to the <see cref="T:HarfBuzzSharp.Blob" />. Otherwise, the resources it is using will not be freed until the garbage collector calls the finalizer.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DisposeHandler">
      <MemberSignature Language="C#" Value="protected override void DisposeHandler ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void DisposeHandler() cil managed" />
      <MemberSignature Language="DocId" Value="M:HarfBuzzSharp.Blob.DisposeHandler" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>HarfBuzzSharp</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Releases the unmanaged resources used.</summary>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="Empty">
      <MemberSignature Language="C#" Value="public static HarfBuzzSharp.Blob Empty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class HarfBuzzSharp.Blob Empty" />
      <MemberSignature Language="DocId" Value="P:HarfBuzzSharp.Blob.Empty" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>HarfBuzzSharp</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>HarfBuzzSharp.Blob</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a reference to the empty <see cref="T:HarfBuzzSharp.Blob" /> instance.</summary>
        <value></value>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="FaceCount">
      <MemberSignature Language="C#" Value="public int FaceCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 FaceCount" />
      <MemberSignature Language="DocId" Value="P:HarfBuzzSharp.Blob.FaceCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>HarfBuzzSharp</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the number of faces in this blob.</summary>
        <value></value>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="FromFile">
      <MemberSignature Language="C#" Value="public static HarfBuzzSharp.Blob FromFile (string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class HarfBuzzSharp.Blob FromFile(string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:HarfBuzzSharp.Blob.FromFile(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>HarfBuzzSharp</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>HarfBuzzSharp.Blob</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" Index="0" FrameworkAlternate="harfbuzzsharp-2.6;harfbuzzsharp-2.8;harfbuzzsharp-7.3" />
      </Parameters>
      <Docs>
        <param name="fileName">The path to the file to load.</param>
        <summary>Creates a new <see cref="T:HarfBuzzSharp.Blob" /> instance from the contents of the file.</summary>
        <returns>Returns the new <see cref="T:HarfBuzzSharp.Blob" /> instance.</returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="FromStream">
      <MemberSignature Language="C#" Value="public static HarfBuzzSharp.Blob FromStream (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class HarfBuzzSharp.Blob FromStream(class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:HarfBuzzSharp.Blob.FromStream(System.IO.Stream)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>HarfBuzzSharp</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>HarfBuzzSharp.Blob</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" Index="0" FrameworkAlternate="harfbuzzsharp-2.6;harfbuzzsharp-2.8;harfbuzzsharp-7.3" />
      </Parameters>
      <Docs>
        <param name="stream">The stream to use.</param>
        <summary>Creates a new <see cref="T:HarfBuzzSharp.Blob" /> instance from the contents of the stream.</summary>
        <returns>Returns the new <see cref="T:HarfBuzzSharp.Blob" /> instance.</returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="IsImmutable">
      <MemberSignature Language="C#" Value="public bool IsImmutable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsImmutable" />
      <MemberSignature Language="DocId" Value="P:HarfBuzzSharp.Blob.IsImmutable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>HarfBuzzSharp</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the value indicating whether the blob is immutable.</summary>
        <value></value>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="Length">
      <MemberSignature Language="C#" Value="public int Length { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Length" />
      <MemberSignature Language="DocId" Value="P:HarfBuzzSharp.Blob.Length" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>HarfBuzzSharp</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the length of blob data in bytes.</summary>
        <value></value>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="MakeImmutable">
      <MemberSignature Language="C#" Value="public void MakeImmutable ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void MakeImmutable() cil managed" />
      <MemberSignature Language="DocId" Value="M:HarfBuzzSharp.Blob.MakeImmutable" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>HarfBuzzSharp</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Makes the blob immutable.</summary>
        <remarks></remarks>
      </Docs>
    </Member>
  </Members>
</Type>
