<Type Name="SKShader" FullName="SkiaSharp.SKShader">
  <TypeSignature Language="C#" Value="public class SKShader : SkiaSharp.SKObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SKShader extends SkiaSharp.SKObject" />
  <TypeSignature Language="DocId" Value="T:SkiaSharp.SKShader" />
  <AssemblyInfo>
    <AssemblyName>SkiaSharp</AssemblyName>
    <AssemblyVersion>1.60.0.0</AssemblyVersion>
    <AssemblyVersion>1.68.0.0</AssemblyVersion>
    <AssemblyVersion>2.80.0.0</AssemblyVersion>
    <AssemblyVersion>2.88.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>SkiaSharp.SKObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Shaders specify the source color(s) for what is being drawn in the <see cref="T:SkiaSharp.SKPaint" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[
## Remarks

Shaders specify the source colors for what is being drawn. If a paint has no
shader, then the paint's color is used. If the paint has a shader, then the
shader's colors are used instead, but they are modulated by the paint's alpha.

This makes it easy to create a shader once (for example, bitmap tiling or
gradient) and then change its transparency without having to modify the
original shader, only the paint's alpha needs to be modified.

Shaders are created by calling one of the static "Create" methods.

## Examples

### Linear Gradient Shader Example

```csharp
var info = new SKImageInfo(256, 256);
using (var surface = SKSurface.Create(info)) {
    SKCanvas canvas = surface.Canvas;

    canvas.Clear(SKColors.White);

    // create the shader
    var colors = new SKColor[] {
        new SKColor(0, 0, 255),
        new SKColor(0, 255, 0)
    };
    var shader = SKShader.CreateLinearGradient(
        new SKPoint(0, 0),
        new SKPoint(255, 255),
        colors,
        null,
        SKShaderTileMode.Clamp);

    // use the shader
    var paint = new SKPaint {
        Shader = shader
    };
    canvas.DrawPaint(paint);
}
```

The example above produces the following:

![Linear Gradient](~/images/linear.png "Linear Gradient")

### Radial Gradient Shader Example

```csharp
var info = new SKImageInfo(256, 256);
using (var surface = SKSurface.Create(info)) {
    SKCanvas canvas = surface.Canvas;

    canvas.Clear(SKColors.White);

    // create the shader
    var colors = new SKColor[] {
        new SKColor(0, 0, 255),
        new SKColor(0, 255, 0)
    };
    var shader = SKShader.CreateRadialGradient(
        new SKPoint(128, 128),
        180,
        colors,
        null,
        SKShaderTileMode.Clamp);

    // use the shader
    var paint = new SKPaint {
        Shader = shader
    };
    canvas.DrawPaint(paint);
}
```

The example above produces the following:

![Radial Gradient](~/images/radial.png "Radial Gradient")

### Two-point Conical Gradient Shader Example

```csharp
var info = new SKImageInfo(256, 256);
using (var surface = SKSurface.Create(info)) {
    SKCanvas canvas = surface.Canvas;

    canvas.Clear(SKColors.White);

    // create the shader
    var colors = new SKColor[] {
        new SKColor(0, 0, 255),
        new SKColor(0, 255, 0)
    };
    var shader = SKShader.CreateTwoPointConicalGradient(
        new SKPoint(128, 128),
        128,
        new SKPoint(128, 16),
        16,
        colors,
        null,
        SKShaderTileMode.Clamp);

    // use the shader
    var paint = new SKPaint {
        Shader = shader
    };
    canvas.DrawPaint(paint);
}
```

The example above produces the following:

![Two-point Conical Gradient](~/images/twopoint.png "Two-point Conical Gradient")

### Sweep Gradient Shader Example

```csharp
var info = new SKImageInfo(256, 256);
using (var surface = SKSurface.Create(info)) {
    SKCanvas canvas = surface.Canvas;

    canvas.Clear(SKColors.White);

    // create the shader
    var colors = new SKColor[] {
        new SKColor(0, 255, 255),
        new SKColor(255, 0, 255),
        new SKColor(255, 255, 0),
        new SKColor(0, 255, 255)
    };
    var shader = SKShader.CreateSweepGradient(
        new SKPoint(128, 128),
        colors,
        null);

    // use the shader
    var paint = new SKPaint {
        Shader = shader
    };
    canvas.DrawPaint(paint);
}
```

The example above produces the following:

![Sweep Gradient](~/images/sweep.png "Sweep Gradient")

### Fractal Perlin Noise Shader Example

```csharp
var info = new SKImageInfo(256, 256);
using (var surface = SKSurface.Create(info)) {
    SKCanvas canvas = surface.Canvas;

    canvas.Clear(SKColors.White);

    // create the shader
    var shader = SKShader.CreatePerlinNoiseFractalNoise(0.5f, 0.5f, 4, 0);

    // use the shader
    var paint = new SKPaint {
        Shader = shader
    };
    canvas.DrawPaint(paint);
}
```

The example above produces the following:

![Fractal Perlin Noise](~/images/fractal-perlin-noise.png "Fractal Perlin Noise")

### Perlin Noise Turbulence Shader Example

```csharp
var info = new SKImageInfo(256, 256);
using (var surface = SKSurface.Create(info)) {
    SKCanvas canvas = surface.Canvas;

    canvas.Clear(SKColors.White);

    // create the shader
    var shader = SKShader.CreatePerlinNoiseTurbulence(0.05f, 0.05f, 4, 0);

    // use the shader
    var paint = new SKPaint {
        Shader = shader
    };
    canvas.DrawPaint(paint);
}
```

The example above produces the following:

![Fractal Perlin Noise](~/images/perlin-noise-turbulence.png "Fractal Perlin Noise")

### Compose Shader Example

```csharp
var info = new SKImageInfo(256, 256);
using (var surface = SKSurface.Create(info)) {
    SKCanvas canvas = surface.Canvas;

    canvas.Clear(SKColors.White);

    // create the first shader
    var colors = new SKColor[] {
        new SKColor(0, 255, 255),
        new SKColor(255, 0, 255),
        new SKColor(255, 255, 0),
        new SKColor(0, 255, 255)
    };
    var sweep = SKShader.CreateSweepGradient(new SKPoint(128, 128), colors, null);

    // create the second shader
    var turbulence = SKShader.CreatePerlinNoiseTurbulence(0.05f, 0.05f, 4, 0);

    // create the compose shader
    var shader = SKShader.CreateCompose(sweep, turbulence, SKBlendMode.SrcOver);

    // use the compose shader
    var paint = new SKPaint {
        Shader = shader
    };
    canvas.DrawPaint(paint);
}
```

The example above produces the following:

![Compose Shader](~/images/compose.png "Compose Shader")
]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="CreateBitmap">
      <MemberSignature Language="C#" Value="public static SkiaSharp.SKShader CreateBitmap (SkiaSharp.SKBitmap src);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class SkiaSharp.SKShader CreateBitmap(class SkiaSharp.SKBitmap src) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKShader.CreateBitmap(SkiaSharp.SKBitmap)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.68.0.0</AssemblyVersion>
        <AssemblyVersion>2.80.0.0</AssemblyVersion>
        <AssemblyVersion>2.88.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>SkiaSharp.SKShader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="src" Type="SkiaSharp.SKBitmap" Index="0" FrameworkAlternate="skiasharp-1.68;skiasharp-2.80;skiasharp-2.88" />
      </Parameters>
      <Docs>
        <param name="src">The bitmap to use inside the shader.</param>
        <summary>Creates a new shader that will draw with the specified bitmap.</summary>
        <returns>Returns a new <see cref="T:SkiaSharp.SKShader" />, or an empty shader on error. This function never returns null.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[
## Remarks

If the bitmap cannot be used (has no pixels, or its dimensions exceed
implementation limits) then an empty shader may be returned. If the source
bitmap's color type is <xref:SkiaSharp.SKColorType.Alpha8> then that mask will
be colorized using the color on the paint.
]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateBitmap">
      <MemberSignature Language="C#" Value="public static SkiaSharp.SKShader CreateBitmap (SkiaSharp.SKBitmap src, SkiaSharp.SKShaderTileMode tmx, SkiaSharp.SKShaderTileMode tmy);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class SkiaSharp.SKShader CreateBitmap(class SkiaSharp.SKBitmap src, valuetype SkiaSharp.SKShaderTileMode tmx, valuetype SkiaSharp.SKShaderTileMode tmy) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKShader.CreateBitmap(SkiaSharp.SKBitmap,SkiaSharp.SKShaderTileMode,SkiaSharp.SKShaderTileMode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
        <AssemblyVersion>1.68.0.0</AssemblyVersion>
        <AssemblyVersion>2.80.0.0</AssemblyVersion>
        <AssemblyVersion>2.88.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>SkiaSharp.SKShader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="src" Type="SkiaSharp.SKBitmap" />
        <Parameter Name="tmx" Type="SkiaSharp.SKShaderTileMode" />
        <Parameter Name="tmy" Type="SkiaSharp.SKShaderTileMode" />
      </Parameters>
      <Docs>
        <param name="src">The bitmap to use inside the shader.</param>
        <param name="tmx">The tiling mode to use when sampling the bitmap in the x-direction.</param>
        <param name="tmy">The tiling mode to use when sampling the bitmap in the y-direction.</param>
        <summary>Creates a new shader that will draw with the specified bitmap.</summary>
        <returns>Returns a new <see cref="T:SkiaSharp.SKShader" />, or an empty shader on error. This function never returns null.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[
## Remarks

If the bitmap cannot be used (has no pixels, or its dimensions exceed
implementation limits) then an empty shader may be returned. If the source
bitmap's color type is <xref:SkiaSharp.SKColorType.Alpha8> then that mask will
be colorized using the color on the paint.
]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateBitmap">
      <MemberSignature Language="C#" Value="public static SkiaSharp.SKShader CreateBitmap (SkiaSharp.SKBitmap src, SkiaSharp.SKShaderTileMode tmx, SkiaSharp.SKShaderTileMode tmy, SkiaSharp.SKMatrix localMatrix);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class SkiaSharp.SKShader CreateBitmap(class SkiaSharp.SKBitmap src, valuetype SkiaSharp.SKShaderTileMode tmx, valuetype SkiaSharp.SKShaderTileMode tmy, valuetype SkiaSharp.SKMatrix localMatrix) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKShader.CreateBitmap(SkiaSharp.SKBitmap,SkiaSharp.SKShaderTileMode,SkiaSharp.SKShaderTileMode,SkiaSharp.SKMatrix)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
        <AssemblyVersion>1.68.0.0</AssemblyVersion>
        <AssemblyVersion>2.80.0.0</AssemblyVersion>
        <AssemblyVersion>2.88.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>SkiaSharp.SKShader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="src" Type="SkiaSharp.SKBitmap" />
        <Parameter Name="tmx" Type="SkiaSharp.SKShaderTileMode" />
        <Parameter Name="tmy" Type="SkiaSharp.SKShaderTileMode" />
        <Parameter Name="localMatrix" Type="SkiaSharp.SKMatrix" />
      </Parameters>
      <Docs>
        <param name="src">The bitmap to use inside the shader.</param>
        <param name="tmx">The tiling mode to use when sampling the bitmap in the x-direction.</param>
        <param name="tmy">The tiling mode to use when sampling the bitmap in the y-direction.</param>
        <param name="localMatrix">The matrix to apply before applying the shader.</param>
        <summary>Creates a new shader that will draw with the specified bitmap.</summary>
        <returns>Returns a new <see cref="T:SkiaSharp.SKShader" />, or an empty shader on error. This function never returns null.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[
## Remarks

If the bitmap cannot be used (has no pixels, or its dimensions exceed
implementation limits) then an empty shader may be returned. If the source
bitmap's color type is <xref:SkiaSharp.SKColorType.Alpha8> then that mask will
be colorized using the color on the paint.
]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateColor">
      <MemberSignature Language="C#" Value="public static SkiaSharp.SKShader CreateColor (SkiaSharp.SKColor color);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class SkiaSharp.SKShader CreateColor(valuetype SkiaSharp.SKColor color) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKShader.CreateColor(SkiaSharp.SKColor)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
        <AssemblyVersion>1.68.0.0</AssemblyVersion>
        <AssemblyVersion>2.80.0.0</AssemblyVersion>
        <AssemblyVersion>2.88.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>SkiaSharp.SKShader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="color" Type="SkiaSharp.SKColor" />
      </Parameters>
      <Docs>
        <param name="color">The color to paint.</param>
        <summary>Creates a new shader that just draws the specified color.</summary>
        <returns>Returns a new <see cref="T:SkiaSharp.SKShader" />, or an empty shader on error. This function never returns null.</returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateColor">
      <MemberSignature Language="C#" Value="public static SkiaSharp.SKShader CreateColor (SkiaSharp.SKColorF color, SkiaSharp.SKColorSpace colorspace);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class SkiaSharp.SKShader CreateColor(valuetype SkiaSharp.SKColorF color, class SkiaSharp.SKColorSpace colorspace) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKShader.CreateColor(SkiaSharp.SKColorF,SkiaSharp.SKColorSpace)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.68.0.0</AssemblyVersion>
        <AssemblyVersion>2.80.0.0</AssemblyVersion>
        <AssemblyVersion>2.88.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>SkiaSharp.SKShader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="color" Type="SkiaSharp.SKColorF" Index="0" FrameworkAlternate="skiasharp-1.68;skiasharp-2.80;skiasharp-2.88" />
        <Parameter Name="colorspace" Type="SkiaSharp.SKColorSpace" Index="1" FrameworkAlternate="skiasharp-1.68;skiasharp-2.80;skiasharp-2.88" />
      </Parameters>
      <Docs>
        <param name="color">The color to paint.</param>
        <param name="colorspace">The colorspace to use.</param>
        <summary>Creates a new shader that just draws the specified color.</summary>
        <returns>Returns a new <see cref="T:SkiaSharp.SKShader" />, or an empty shader on error. This function never returns null.</returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateColorFilter">
      <MemberSignature Language="C#" Value="public static SkiaSharp.SKShader CreateColorFilter (SkiaSharp.SKShader shader, SkiaSharp.SKColorFilter filter);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class SkiaSharp.SKShader CreateColorFilter(class SkiaSharp.SKShader shader, class SkiaSharp.SKColorFilter filter) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKShader.CreateColorFilter(SkiaSharp.SKShader,SkiaSharp.SKColorFilter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
        <AssemblyVersion>1.68.0.0</AssemblyVersion>
        <AssemblyVersion>2.80.0.0</AssemblyVersion>
        <AssemblyVersion>2.88.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>SkiaSharp.SKShader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="shader" Type="SkiaSharp.SKShader" />
        <Parameter Name="filter" Type="SkiaSharp.SKColorFilter" />
      </Parameters>
      <Docs>
        <param name="shader">The shader to apply.</param>
        <param name="filter">The color filter to apply.</param>
        <summary>Creates a new shader that produces the same colors as invoking this shader and then applying the color filter.</summary>
        <returns>Returns a new <see cref="T:SkiaSharp.SKShader" />, or an empty shader on error. This function never returns null.</returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="CreateCompose">
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
      </AssemblyInfo>
      <Docs>
        <remarks>
          <format type="text/markdown"><![CDATA[
## Remarks

Create a new compose shader, which combines two shaders by a blend mode.

## Examples

```csharp
var info = new SKImageInfo(256, 256);
using (var surface = SKSurface.Create(info)) {
    SKCanvas canvas = surface.Canvas;

    canvas.Clear(SKColors.White);

    // create the first shader
    var colors = new SKColor[] {
        new SKColor(0, 255, 255),
        new SKColor(255, 0, 255),
        new SKColor(255, 255, 0),
        new SKColor(0, 255, 255)
    };
    var sweep = SKShader.CreateSweepGradient(new SKPoint(128, 128), colors, null);

    // create the second shader
    var turbulence = SKShader.CreatePerlinNoiseTurbulence(0.05f, 0.05f, 4, 0);

    // create the compose shader
    var shader = SKShader.CreateCompose(sweep, turbulence, SKBlendMode.SrcOver);

    // use the compose shader
    var paint = new SKPaint {
        Shader = shader
    };
    canvas.DrawPaint(paint);
}
```

The example above produces the following:

![Compose Shader](~/images/compose.png "Compose Shader")
]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreateCompose">
      <MemberSignature Language="C#" Value="public static SkiaSharp.SKShader CreateCompose (SkiaSharp.SKShader shaderA, SkiaSharp.SKShader shaderB);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class SkiaSharp.SKShader CreateCompose(class SkiaSharp.SKShader shaderA, class SkiaSharp.SKShader shaderB) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKShader.CreateCompose(SkiaSharp.SKShader,SkiaSharp.SKShader)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
        <AssemblyVersion>1.68.0.0</AssemblyVersion>
        <AssemblyVersion>2.80.0.0</AssemblyVersion>
        <AssemblyVersion>2.88.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>SkiaSharp.SKShader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="shaderA" Type="SkiaSharp.SKShader" />
        <Parameter Name="shaderB" Type="SkiaSharp.SKShader" />
      </Parameters>
      <Docs>
        <param name="shaderA">The colors from this shader are seen as the destination by the blend mode.</param>
        <param name="shaderB">The colors from this shader are seen as the source by the blend mode.</param>
        <summary>Create a new compose shader, which combines two shaders by the <see cref="F:SkiaSharp.SKBlendMode.SrcOver" /> blend mode.</summary>
        <returns>Returns a new <see cref="T:SkiaSharp.SKShader" />, or an empty shader on error. This function never returns null.</returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateCompose">
      <MemberSignature Language="C#" Value="public static SkiaSharp.SKShader CreateCompose (SkiaSharp.SKShader shaderA, SkiaSharp.SKShader shaderB, SkiaSharp.SKBlendMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class SkiaSharp.SKShader CreateCompose(class SkiaSharp.SKShader shaderA, class SkiaSharp.SKShader shaderB, valuetype SkiaSharp.SKBlendMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKShader.CreateCompose(SkiaSharp.SKShader,SkiaSharp.SKShader,SkiaSharp.SKBlendMode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
        <AssemblyVersion>1.68.0.0</AssemblyVersion>
        <AssemblyVersion>2.80.0.0</AssemblyVersion>
        <AssemblyVersion>2.88.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>SkiaSharp.SKShader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="shaderA" Type="SkiaSharp.SKShader" />
        <Parameter Name="shaderB" Type="SkiaSharp.SKShader" />
        <Parameter Name="mode" Type="SkiaSharp.SKBlendMode" />
      </Parameters>
      <Docs>
        <param name="shaderA">The colors from this shader are seen as the destination by the blend mode.</param>
        <param name="shaderB">The colors from this shader are seen as the source by the blend mode.</param>
        <param name="mode">The blend mode that combines the two shaders.</param>
        <summary>Create a new compose shader, which combines two shaders by a blend mode.</summary>
        <returns>Returns a new <see cref="T:SkiaSharp.SKShader" />, or an empty shader on error. This function never returns null.</returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateEmpty">
      <MemberSignature Language="C#" Value="public static SkiaSharp.SKShader CreateEmpty ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class SkiaSharp.SKShader CreateEmpty() cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKShader.CreateEmpty" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
        <AssemblyVersion>1.68.0.0</AssemblyVersion>
        <AssemblyVersion>2.80.0.0</AssemblyVersion>
        <AssemblyVersion>2.88.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>SkiaSharp.SKShader</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Creates a new "empty" shader that will not draw anything.</summary>
        <returns>Returns a new <see cref="T:SkiaSharp.SKShader" />, or an empty shader on error. This function never returns null.</returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateImage">
      <MemberSignature Language="C#" Value="public static SkiaSharp.SKShader CreateImage (SkiaSharp.SKImage src);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class SkiaSharp.SKShader CreateImage(class SkiaSharp.SKImage src) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKShader.CreateImage(SkiaSharp.SKImage)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.68.0.0</AssemblyVersion>
        <AssemblyVersion>2.80.0.0</AssemblyVersion>
        <AssemblyVersion>2.88.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>SkiaSharp.SKShader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="src" Type="SkiaSharp.SKImage" Index="0" FrameworkAlternate="skiasharp-1.68;skiasharp-2.80;skiasharp-2.88" />
      </Parameters>
      <Docs>
        <param name="src">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateImage">
      <MemberSignature Language="C#" Value="public static SkiaSharp.SKShader CreateImage (SkiaSharp.SKImage src, SkiaSharp.SKShaderTileMode tmx, SkiaSharp.SKShaderTileMode tmy);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class SkiaSharp.SKShader CreateImage(class SkiaSharp.SKImage src, valuetype SkiaSharp.SKShaderTileMode tmx, valuetype SkiaSharp.SKShaderTileMode tmy) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKShader.CreateImage(SkiaSharp.SKImage,SkiaSharp.SKShaderTileMode,SkiaSharp.SKShaderTileMode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.68.0.0</AssemblyVersion>
        <AssemblyVersion>2.80.0.0</AssemblyVersion>
        <AssemblyVersion>2.88.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>SkiaSharp.SKShader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="src" Type="SkiaSharp.SKImage" Index="0" FrameworkAlternate="skiasharp-1.68;skiasharp-2.80;skiasharp-2.88" />
        <Parameter Name="tmx" Type="SkiaSharp.SKShaderTileMode" Index="1" FrameworkAlternate="skiasharp-1.68;skiasharp-2.80;skiasharp-2.88" />
        <Parameter Name="tmy" Type="SkiaSharp.SKShaderTileMode" Index="2" FrameworkAlternate="skiasharp-1.68;skiasharp-2.80;skiasharp-2.88" />
      </Parameters>
      <Docs>
        <param name="src">To be added.</param>
        <param name="tmx">To be added.</param>
        <param name="tmy">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateImage">
      <MemberSignature Language="C#" Value="public static SkiaSharp.SKShader CreateImage (SkiaSharp.SKImage src, SkiaSharp.SKShaderTileMode tmx, SkiaSharp.SKShaderTileMode tmy, SkiaSharp.SKMatrix localMatrix);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class SkiaSharp.SKShader CreateImage(class SkiaSharp.SKImage src, valuetype SkiaSharp.SKShaderTileMode tmx, valuetype SkiaSharp.SKShaderTileMode tmy, valuetype SkiaSharp.SKMatrix localMatrix) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKShader.CreateImage(SkiaSharp.SKImage,SkiaSharp.SKShaderTileMode,SkiaSharp.SKShaderTileMode,SkiaSharp.SKMatrix)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.68.0.0</AssemblyVersion>
        <AssemblyVersion>2.80.0.0</AssemblyVersion>
        <AssemblyVersion>2.88.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>SkiaSharp.SKShader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="src" Type="SkiaSharp.SKImage" Index="0" FrameworkAlternate="skiasharp-1.68;skiasharp-2.80;skiasharp-2.88" />
        <Parameter Name="tmx" Type="SkiaSharp.SKShaderTileMode" Index="1" FrameworkAlternate="skiasharp-1.68;skiasharp-2.80;skiasharp-2.88" />
        <Parameter Name="tmy" Type="SkiaSharp.SKShaderTileMode" Index="2" FrameworkAlternate="skiasharp-1.68;skiasharp-2.80;skiasharp-2.88" />
        <Parameter Name="localMatrix" Type="SkiaSharp.SKMatrix" Index="3" FrameworkAlternate="skiasharp-1.68;skiasharp-2.80;skiasharp-2.88" />
      </Parameters>
      <Docs>
        <param name="src">To be added.</param>
        <param name="tmx">To be added.</param>
        <param name="tmy">To be added.</param>
        <param name="localMatrix">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateLerp">
      <MemberSignature Language="C#" Value="public static SkiaSharp.SKShader CreateLerp (float weight, SkiaSharp.SKShader dst, SkiaSharp.SKShader src);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class SkiaSharp.SKShader CreateLerp(float32 weight, class SkiaSharp.SKShader dst, class SkiaSharp.SKShader src) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKShader.CreateLerp(System.Single,SkiaSharp.SKShader,SkiaSharp.SKShader)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>2.80.0.0</AssemblyVersion>
        <AssemblyVersion>2.88.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>SkiaSharp.SKShader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="weight" Type="System.Single" Index="0" FrameworkAlternate="skiasharp-2.80;skiasharp-2.88" />
        <Parameter Name="dst" Type="SkiaSharp.SKShader" Index="1" FrameworkAlternate="skiasharp-2.80;skiasharp-2.88" />
        <Parameter Name="src" Type="SkiaSharp.SKShader" Index="2" FrameworkAlternate="skiasharp-2.80;skiasharp-2.88" />
      </Parameters>
      <Docs>
        <param name="weight">To be added.</param>
        <param name="dst">To be added.</param>
        <param name="src">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="CreateLinearGradient">
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
      </AssemblyInfo>
      <Docs>
        <remarks>
          <format type="text/markdown"><![CDATA[
## Remarks

Creates a shader that generates a linear gradient between the two specified
points.

## Examples

```csharp
var info = new SKImageInfo(256, 256);
using (var surface = SKSurface.Create(info)) {
    SKCanvas canvas = surface.Canvas;

    canvas.Clear(SKColors.White);

    // create the shader
    var colors = new SKColor[] {
        new SKColor(0, 0, 255),
        new SKColor(0, 255, 0)
    };
    var shader = SKShader.CreateLinearGradient(
        new SKPoint(0, 0),
        new SKPoint(255, 255),
        colors,
        null,
        SKShaderTileMode.Clamp);

    // use the shader
    var paint = new SKPaint {
        Shader = shader
    };
    canvas.DrawPaint(paint);
}
```

The example above produces the following:

![Linear Gradient](~/images/linear.png "Linear Gradient")
]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreateLinearGradient">
      <MemberSignature Language="C#" Value="public static SkiaSharp.SKShader CreateLinearGradient (SkiaSharp.SKPoint start, SkiaSharp.SKPoint end, SkiaSharp.SKColor[] colors, SkiaSharp.SKShaderTileMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class SkiaSharp.SKShader CreateLinearGradient(valuetype SkiaSharp.SKPoint start, valuetype SkiaSharp.SKPoint end, valuetype SkiaSharp.SKColor[] colors, valuetype SkiaSharp.SKShaderTileMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKShader.CreateLinearGradient(SkiaSharp.SKPoint,SkiaSharp.SKPoint,SkiaSharp.SKColor[],SkiaSharp.SKShaderTileMode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.68.0.0</AssemblyVersion>
        <AssemblyVersion>2.80.0.0</AssemblyVersion>
        <AssemblyVersion>2.88.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>SkiaSharp.SKShader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="start" Type="SkiaSharp.SKPoint" Index="0" FrameworkAlternate="skiasharp-1.68;skiasharp-2.80;skiasharp-2.88" />
        <Parameter Name="end" Type="SkiaSharp.SKPoint" Index="1" FrameworkAlternate="skiasharp-1.68;skiasharp-2.80;skiasharp-2.88" />
        <Parameter Name="colors" Type="SkiaSharp.SKColor[]" Index="2" FrameworkAlternate="skiasharp-1.68;skiasharp-2.80;skiasharp-2.88" />
        <Parameter Name="mode" Type="SkiaSharp.SKShaderTileMode" Index="3" FrameworkAlternate="skiasharp-1.68;skiasharp-2.80;skiasharp-2.88" />
      </Parameters>
      <Docs>
        <param name="start">The start point for the gradient.</param>
        <param name="end">The end point for the gradient.</param>
        <param name="colors">The array colors to be distributed between the two points.</param>
        <param name="mode">The tiling mode.</param>
        <summary>Creates a shader that generates a linear gradient between the two specified points.</summary>
        <returns>Returns a new <see cref="T:SkiaSharp.SKShader" />, or an empty shader on error. This function never returns null.</returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateLinearGradient">
      <MemberSignature Language="C#" Value="public static SkiaSharp.SKShader CreateLinearGradient (SkiaSharp.SKPoint start, SkiaSharp.SKPoint end, SkiaSharp.SKColor[] colors, float[] colorPos, SkiaSharp.SKShaderTileMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class SkiaSharp.SKShader CreateLinearGradient(valuetype SkiaSharp.SKPoint start, valuetype SkiaSharp.SKPoint end, valuetype SkiaSharp.SKColor[] colors, float32[] colorPos, valuetype SkiaSharp.SKShaderTileMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKShader.CreateLinearGradient(SkiaSharp.SKPoint,SkiaSharp.SKPoint,SkiaSharp.SKColor[],System.Single[],SkiaSharp.SKShaderTileMode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
        <AssemblyVersion>1.68.0.0</AssemblyVersion>
        <AssemblyVersion>2.80.0.0</AssemblyVersion>
        <AssemblyVersion>2.88.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>SkiaSharp.SKShader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="start" Type="SkiaSharp.SKPoint" />
        <Parameter Name="end" Type="SkiaSharp.SKPoint" />
        <Parameter Name="colors" Type="SkiaSharp.SKColor[]" />
        <Parameter Name="colorPos" Type="System.Single[]" />
        <Parameter Name="mode" Type="SkiaSharp.SKShaderTileMode" />
      </Parameters>
      <Docs>
        <param name="start">The start point for the gradient.</param>
        <param name="end">The end point for the gradient.</param>
        <param name="colors">The array colors to be distributed between the two points.</param>
        <param name="colorPos">The positions (in the range of 0..1) of each corresponding color, or null to evenly distribute the colors.</param>
        <param name="mode">The tiling mode.</param>
        <summary>Creates a shader that generates a linear gradient between the two specified points.</summary>
        <returns>Returns a new <see cref="T:SkiaSharp.SKShader" />, or an empty shader on error. This function never returns null.</returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateLinearGradient">
      <MemberSignature Language="C#" Value="public static SkiaSharp.SKShader CreateLinearGradient (SkiaSharp.SKPoint start, SkiaSharp.SKPoint end, SkiaSharp.SKColorF[] colors, SkiaSharp.SKColorSpace colorspace, SkiaSharp.SKShaderTileMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class SkiaSharp.SKShader CreateLinearGradient(valuetype SkiaSharp.SKPoint start, valuetype SkiaSharp.SKPoint end, valuetype SkiaSharp.SKColorF[] colors, class SkiaSharp.SKColorSpace colorspace, valuetype SkiaSharp.SKShaderTileMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKShader.CreateLinearGradient(SkiaSharp.SKPoint,SkiaSharp.SKPoint,SkiaSharp.SKColorF[],SkiaSharp.SKColorSpace,SkiaSharp.SKShaderTileMode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.68.0.0</AssemblyVersion>
        <AssemblyVersion>2.80.0.0</AssemblyVersion>
        <AssemblyVersion>2.88.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>SkiaSharp.SKShader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="start" Type="SkiaSharp.SKPoint" Index="0" FrameworkAlternate="skiasharp-1.68;skiasharp-2.80;skiasharp-2.88" />
        <Parameter Name="end" Type="SkiaSharp.SKPoint" Index="1" FrameworkAlternate="skiasharp-1.68;skiasharp-2.80;skiasharp-2.88" />
        <Parameter Name="colors" Type="SkiaSharp.SKColorF[]" Index="2" FrameworkAlternate="skiasharp-1.68;skiasharp-2.80;skiasharp-2.88" />
        <Parameter Name="colorspace" Type="SkiaSharp.SKColorSpace" Index="3" FrameworkAlternate="skiasharp-1.68;skiasharp-2.80;skiasharp-2.88" />
        <Parameter Name="mode" Type="SkiaSharp.SKShaderTileMode" Index="4" FrameworkAlternate="skiasharp-1.68;skiasharp-2.80;skiasharp-2.88" />
      </Parameters>
      <Docs>
        <param name="start">To be added.</param>
        <param name="end">To be added.</param>
        <param name="colors">To be added.</param>
        <param name="colorspace">To be added.</param>
        <param name="mode">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateLinearGradient">
      <MemberSignature Language="C#" Value="public static SkiaSharp.SKShader CreateLinearGradient (SkiaSharp.SKPoint start, SkiaSharp.SKPoint end, SkiaSharp.SKColor[] colors, float[] colorPos, SkiaSharp.SKShaderTileMode mode, SkiaSharp.SKMatrix localMatrix);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class SkiaSharp.SKShader CreateLinearGradient(valuetype SkiaSharp.SKPoint start, valuetype SkiaSharp.SKPoint end, valuetype SkiaSharp.SKColor[] colors, float32[] colorPos, valuetype SkiaSharp.SKShaderTileMode mode, valuetype SkiaSharp.SKMatrix localMatrix) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKShader.CreateLinearGradient(SkiaSharp.SKPoint,SkiaSharp.SKPoint,SkiaSharp.SKColor[],System.Single[],SkiaSharp.SKShaderTileMode,SkiaSharp.SKMatrix)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
        <AssemblyVersion>1.68.0.0</AssemblyVersion>
        <AssemblyVersion>2.80.0.0</AssemblyVersion>
        <AssemblyVersion>2.88.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>SkiaSharp.SKShader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="start" Type="SkiaSharp.SKPoint" />
        <Parameter Name="end" Type="SkiaSharp.SKPoint" />
        <Parameter Name="colors" Type="SkiaSharp.SKColor[]" />
        <Parameter Name="colorPos" Type="System.Single[]" />
        <Parameter Name="mode" Type="SkiaSharp.SKShaderTileMode" />
        <Parameter Name="localMatrix" Type="SkiaSharp.SKMatrix" />
      </Parameters>
      <Docs>
        <param name="start">The start point for the gradient.</param>
        <param name="end">The end point for the gradient.</param>
        <param name="colors">The array colors to be distributed between the two points.</param>
        <param name="colorPos">The positions (in the range of 0..1) of each corresponding color, or null to evenly distribute the colors.</param>
        <param name="mode">The tiling mode.</param>
        <param name="localMatrix">The matrix to apply before applying the shader.</param>
        <summary>Creates a shader that generates a linear gradient between the two specified points.</summary>
        <returns>Returns a new <see cref="T:SkiaSharp.SKShader" />, or an empty shader on error. This function never returns null.</returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateLinearGradient">
      <MemberSignature Language="C#" Value="public static SkiaSharp.SKShader CreateLinearGradient (SkiaSharp.SKPoint start, SkiaSharp.SKPoint end, SkiaSharp.SKColorF[] colors, SkiaSharp.SKColorSpace colorspace, float[] colorPos, SkiaSharp.SKShaderTileMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class SkiaSharp.SKShader CreateLinearGradient(valuetype SkiaSharp.SKPoint start, valuetype SkiaSharp.SKPoint end, valuetype SkiaSharp.SKColorF[] colors, class SkiaSharp.SKColorSpace colorspace, float32[] colorPos, valuetype SkiaSharp.SKShaderTileMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKShader.CreateLinearGradient(SkiaSharp.SKPoint,SkiaSharp.SKPoint,SkiaSharp.SKColorF[],SkiaSharp.SKColorSpace,System.Single[],SkiaSharp.SKShaderTileMode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.68.0.0</AssemblyVersion>
        <AssemblyVersion>2.80.0.0</AssemblyVersion>
        <AssemblyVersion>2.88.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>SkiaSharp.SKShader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="start" Type="SkiaSharp.SKPoint" Index="0" FrameworkAlternate="skiasharp-1.68;skiasharp-2.80;skiasharp-2.88" />
        <Parameter Name="end" Type="SkiaSharp.SKPoint" Index="1" FrameworkAlternate="skiasharp-1.68;skiasharp-2.80;skiasharp-2.88" />
        <Parameter Name="colors" Type="SkiaSharp.SKColorF[]" Index="2" FrameworkAlternate="skiasharp-1.68;skiasharp-2.80;skiasharp-2.88" />
        <Parameter Name="colorspace" Type="SkiaSharp.SKColorSpace" Index="3" FrameworkAlternate="skiasharp-1.68;skiasharp-2.80;skiasharp-2.88" />
        <Parameter Name="colorPos" Type="System.Single[]" Index="4" FrameworkAlternate="skiasharp-1.68;skiasharp-2.80;skiasharp-2.88" />
        <Parameter Name="mode" Type="SkiaSharp.SKShaderTileMode" Index="5" FrameworkAlternate="skiasharp-1.68;skiasharp-2.80;skiasharp-2.88" />
      </Parameters>
      <Docs>
        <param name="start">To be added.</param>
        <param name="end">To be added.</param>
        <param name="colors">To be added.</param>
        <param name="colorspace">To be added.</param>
        <param name="colorPos">To be added.</param>
        <param name="mode">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateLinearGradient">
      <MemberSignature Language="C#" Value="public static SkiaSharp.SKShader CreateLinearGradient (SkiaSharp.SKPoint start, SkiaSharp.SKPoint end, SkiaSharp.SKColorF[] colors, SkiaSharp.SKColorSpace colorspace, float[] colorPos, SkiaSharp.SKShaderTileMode mode, SkiaSharp.SKMatrix localMatrix);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class SkiaSharp.SKShader CreateLinearGradient(valuetype SkiaSharp.SKPoint start, valuetype SkiaSharp.SKPoint end, valuetype SkiaSharp.SKColorF[] colors, class SkiaSharp.SKColorSpace colorspace, float32[] colorPos, valuetype SkiaSharp.SKShaderTileMode mode, valuetype SkiaSharp.SKMatrix localMatrix) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKShader.CreateLinearGradient(SkiaSharp.SKPoint,SkiaSharp.SKPoint,SkiaSharp.SKColorF[],SkiaSharp.SKColorSpace,System.Single[],SkiaSharp.SKShaderTileMode,SkiaSharp.SKMatrix)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.68.0.0</AssemblyVersion>
        <AssemblyVersion>2.80.0.0</AssemblyVersion>
        <AssemblyVersion>2.88.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>SkiaSharp.SKShader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="start" Type="SkiaSharp.SKPoint" Index="0" FrameworkAlternate="skiasharp-1.68;skiasharp-2.80;skiasharp-2.88" />
        <Parameter Name="end" Type="SkiaSharp.SKPoint" Index="1" FrameworkAlternate="skiasharp-1.68;skiasharp-2.80;skiasharp-2.88" />
        <Parameter Name="colors" Type="SkiaSharp.SKColorF[]" Index="2" FrameworkAlternate="skiasharp-1.68;skiasharp-2.80;skiasharp-2.88" />
        <Parameter Name="colorspace" Type="SkiaSharp.SKColorSpace" Index="3" FrameworkAlternate="skiasharp-1.68;skiasharp-2.80;skiasharp-2.88" />
        <Parameter Name="colorPos" Type="System.Single[]" Index="4" FrameworkAlternate="skiasharp-1.68;skiasharp-2.80;skiasharp-2.88" />
        <Parameter Name="mode" Type="SkiaSharp.SKShaderTileMode" Index="5" FrameworkAlternate="skiasharp-1.68;skiasharp-2.80;skiasharp-2.88" />
        <Parameter Name="localMatrix" Type="SkiaSharp.SKMatrix" Index="6" FrameworkAlternate="skiasharp-1.68;skiasharp-2.80;skiasharp-2.88" />
      </Parameters>
      <Docs>
        <param name="start">To be added.</param>
        <param name="end">To be added.</param>
        <param name="colors">To be added.</param>
        <param name="colorspace">To be added.</param>
        <param name="colorPos">To be added.</param>
        <param name="mode">To be added.</param>
        <param name="localMatrix">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateLocalMatrix">
      <MemberSignature Language="C#" Value="public static SkiaSharp.SKShader CreateLocalMatrix (SkiaSharp.SKShader shader, SkiaSharp.SKMatrix localMatrix);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class SkiaSharp.SKShader CreateLocalMatrix(class SkiaSharp.SKShader shader, valuetype SkiaSharp.SKMatrix localMatrix) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKShader.CreateLocalMatrix(SkiaSharp.SKShader,SkiaSharp.SKMatrix)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
        <AssemblyVersion>1.68.0.0</AssemblyVersion>
        <AssemblyVersion>2.80.0.0</AssemblyVersion>
        <AssemblyVersion>2.88.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>SkiaSharp.SKShader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="shader" Type="SkiaSharp.SKShader" />
        <Parameter Name="localMatrix" Type="SkiaSharp.SKMatrix" />
      </Parameters>
      <Docs>
        <param name="shader">The shader to apply.</param>
        <param name="localMatrix">The matrix to apply before applying the shader.</param>
        <summary>Creates a shader that first applies the specified matrix and then applies the shader.</summary>
        <returns>Returns a new <see cref="T:SkiaSharp.SKShader" />, or null on error.</returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="CreatePerlinNoiseFractalNoise">
      <MemberSignature Language="C#" Value="public static SkiaSharp.SKShader CreatePerlinNoiseFractalNoise (float baseFrequencyX, float baseFrequencyY, int numOctaves, float seed);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class SkiaSharp.SKShader CreatePerlinNoiseFractalNoise(float32 baseFrequencyX, float32 baseFrequencyY, int32 numOctaves, float32 seed) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKShader.CreatePerlinNoiseFractalNoise(System.Single,System.Single,System.Int32,System.Single)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
        <AssemblyVersion>1.68.0.0</AssemblyVersion>
        <AssemblyVersion>2.80.0.0</AssemblyVersion>
        <AssemblyVersion>2.88.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>SkiaSharp.SKShader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="baseFrequencyX" Type="System.Single" />
        <Parameter Name="baseFrequencyY" Type="System.Single" />
        <Parameter Name="numOctaves" Type="System.Int32" />
        <Parameter Name="seed" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="baseFrequencyX">The frequency in the x-direction in the range of 0..1.</param>
        <param name="baseFrequencyY">The frequency in the y-direction in the range of 0..1.</param>
        <param name="numOctaves">The number of octaves, usually fairly small.</param>
        <param name="seed">The randomization seed.</param>
        <summary>Creates a new shader that draws Perlin fractal noise.</summary>
        <returns>Returns a new <see cref="T:SkiaSharp.SKShader" />, or an empty shader on error. This function never returns null.</returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="CreatePerlinNoiseFractalNoise">
      <MemberSignature Language="C#" Value="public static SkiaSharp.SKShader CreatePerlinNoiseFractalNoise (float baseFrequencyX, float baseFrequencyY, int numOctaves, float seed, SkiaSharp.SKPointI tileSize);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class SkiaSharp.SKShader CreatePerlinNoiseFractalNoise(float32 baseFrequencyX, float32 baseFrequencyY, int32 numOctaves, float32 seed, valuetype SkiaSharp.SKPointI tileSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKShader.CreatePerlinNoiseFractalNoise(System.Single,System.Single,System.Int32,System.Single,SkiaSharp.SKPointI)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
        <AssemblyVersion>1.68.0.0</AssemblyVersion>
        <AssemblyVersion>2.80.0.0</AssemblyVersion>
        <AssemblyVersion>2.88.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>SkiaSharp.SKShader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="baseFrequencyX" Type="System.Single" />
        <Parameter Name="baseFrequencyY" Type="System.Single" />
        <Parameter Name="numOctaves" Type="System.Int32" />
        <Parameter Name="seed" Type="System.Single" />
        <Parameter Name="tileSize" Type="SkiaSharp.SKPointI" />
      </Parameters>
      <Docs>
        <param name="baseFrequencyX">The frequency in the x-direction in the range of 0..1.</param>
        <param name="baseFrequencyY">The frequency in the y-direction in the range of 0..1.</param>
        <param name="numOctaves">The number of octaves, usually fairly small.</param>
        <param name="seed">The randomization seed.</param>
        <param name="tileSize">The tile size used to modify the frequencies so that the noise will be tileable for the given size.</param>
        <summary>Creates a new shader that draws Perlin fractal noise.</summary>
        <returns>Returns a new <see cref="T:SkiaSharp.SKShader" />, or an empty shader on error. This function never returns null.</returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="CreatePerlinNoiseFractalNoise">
      <MemberSignature Language="C#" Value="public static SkiaSharp.SKShader CreatePerlinNoiseFractalNoise (float baseFrequencyX, float baseFrequencyY, int numOctaves, float seed, SkiaSharp.SKSizeI tileSize);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class SkiaSharp.SKShader CreatePerlinNoiseFractalNoise(float32 baseFrequencyX, float32 baseFrequencyY, int32 numOctaves, float32 seed, valuetype SkiaSharp.SKSizeI tileSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKShader.CreatePerlinNoiseFractalNoise(System.Single,System.Single,System.Int32,System.Single,SkiaSharp.SKSizeI)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.68.0.0</AssemblyVersion>
        <AssemblyVersion>2.80.0.0</AssemblyVersion>
        <AssemblyVersion>2.88.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>SkiaSharp.SKShader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="baseFrequencyX" Type="System.Single" Index="0" FrameworkAlternate="skiasharp-1.68;skiasharp-2.80;skiasharp-2.88" />
        <Parameter Name="baseFrequencyY" Type="System.Single" Index="1" FrameworkAlternate="skiasharp-1.68;skiasharp-2.80;skiasharp-2.88" />
        <Parameter Name="numOctaves" Type="System.Int32" Index="2" FrameworkAlternate="skiasharp-1.68;skiasharp-2.80;skiasharp-2.88" />
        <Parameter Name="seed" Type="System.Single" Index="3" FrameworkAlternate="skiasharp-1.68;skiasharp-2.80;skiasharp-2.88" />
        <Parameter Name="tileSize" Type="SkiaSharp.SKSizeI" Index="4" FrameworkAlternate="skiasharp-1.68;skiasharp-2.80;skiasharp-2.88" />
      </Parameters>
      <Docs>
        <param name="baseFrequencyX">To be added.</param>
        <param name="baseFrequencyY">To be added.</param>
        <param name="numOctaves">To be added.</param>
        <param name="seed">To be added.</param>
        <param name="tileSize">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreatePerlinNoiseImprovedNoise">
      <MemberSignature Language="C#" Value="public static SkiaSharp.SKShader CreatePerlinNoiseImprovedNoise (float baseFrequencyX, float baseFrequencyY, int numOctaves, float z);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class SkiaSharp.SKShader CreatePerlinNoiseImprovedNoise(float32 baseFrequencyX, float32 baseFrequencyY, int32 numOctaves, float32 z) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKShader.CreatePerlinNoiseImprovedNoise(System.Single,System.Single,System.Int32,System.Single)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.68.0.0</AssemblyVersion>
        <AssemblyVersion>2.80.0.0</AssemblyVersion>
        <AssemblyVersion>2.88.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>SkiaSharp.SKShader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="baseFrequencyX" Type="System.Single" Index="0" FrameworkAlternate="skiasharp-1.68;skiasharp-2.80;skiasharp-2.88" />
        <Parameter Name="baseFrequencyY" Type="System.Single" Index="1" FrameworkAlternate="skiasharp-1.68;skiasharp-2.80;skiasharp-2.88" />
        <Parameter Name="numOctaves" Type="System.Int32" Index="2" FrameworkAlternate="skiasharp-1.68;skiasharp-2.80;skiasharp-2.88" />
        <Parameter Name="z" Type="System.Single" Index="3" FrameworkAlternate="skiasharp-1.68;skiasharp-2.80;skiasharp-2.88" />
      </Parameters>
      <Docs>
        <param name="baseFrequencyX">To be added.</param>
        <param name="baseFrequencyY">To be added.</param>
        <param name="numOctaves">To be added.</param>
        <param name="z">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreatePerlinNoiseTurbulence">
      <MemberSignature Language="C#" Value="public static SkiaSharp.SKShader CreatePerlinNoiseTurbulence (float baseFrequencyX, float baseFrequencyY, int numOctaves, float seed);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class SkiaSharp.SKShader CreatePerlinNoiseTurbulence(float32 baseFrequencyX, float32 baseFrequencyY, int32 numOctaves, float32 seed) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKShader.CreatePerlinNoiseTurbulence(System.Single,System.Single,System.Int32,System.Single)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
        <AssemblyVersion>1.68.0.0</AssemblyVersion>
        <AssemblyVersion>2.80.0.0</AssemblyVersion>
        <AssemblyVersion>2.88.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>SkiaSharp.SKShader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="baseFrequencyX" Type="System.Single" />
        <Parameter Name="baseFrequencyY" Type="System.Single" />
        <Parameter Name="numOctaves" Type="System.Int32" />
        <Parameter Name="seed" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="baseFrequencyX">The frequency in the x-direction in the range of 0..1.</param>
        <param name="baseFrequencyY">The frequency in the y-direction in the range of 0..1.</param>
        <param name="numOctaves">The number of octaves, usually fairly small.</param>
        <param name="seed">The randomization seed.</param>
        <summary>Creates a new shader that draws Perlin turbulence noise.</summary>
        <returns>Returns a new <see cref="T:SkiaSharp.SKShader" />, or an empty shader on error. This function never returns null.</returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="CreatePerlinNoiseTurbulence">
      <MemberSignature Language="C#" Value="public static SkiaSharp.SKShader CreatePerlinNoiseTurbulence (float baseFrequencyX, float baseFrequencyY, int numOctaves, float seed, SkiaSharp.SKPointI tileSize);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class SkiaSharp.SKShader CreatePerlinNoiseTurbulence(float32 baseFrequencyX, float32 baseFrequencyY, int32 numOctaves, float32 seed, valuetype SkiaSharp.SKPointI tileSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKShader.CreatePerlinNoiseTurbulence(System.Single,System.Single,System.Int32,System.Single,SkiaSharp.SKPointI)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
        <AssemblyVersion>1.68.0.0</AssemblyVersion>
        <AssemblyVersion>2.80.0.0</AssemblyVersion>
        <AssemblyVersion>2.88.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>SkiaSharp.SKShader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="baseFrequencyX" Type="System.Single" />
        <Parameter Name="baseFrequencyY" Type="System.Single" />
        <Parameter Name="numOctaves" Type="System.Int32" />
        <Parameter Name="seed" Type="System.Single" />
        <Parameter Name="tileSize" Type="SkiaSharp.SKPointI" />
      </Parameters>
      <Docs>
        <param name="baseFrequencyX">The frequency in the x-direction in the range of 0..1.</param>
        <param name="baseFrequencyY">The frequency in the y-direction in the range of 0..1.</param>
        <param name="numOctaves">The number of octaves, usually fairly small.</param>
        <param name="seed">The randomization seed.</param>
        <param name="tileSize">The tile size used to modify the frequencies so that the noise will be tileable for the given size.</param>
        <summary>Creates a new shader that draws Perlin turbulence noise.</summary>
        <returns>Returns a new <see cref="T:SkiaSharp.SKShader" />, or an empty shader on error. This function never returns null.</returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="CreatePerlinNoiseTurbulence">
      <MemberSignature Language="C#" Value="public static SkiaSharp.SKShader CreatePerlinNoiseTurbulence (float baseFrequencyX, float baseFrequencyY, int numOctaves, float seed, SkiaSharp.SKSizeI tileSize);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class SkiaSharp.SKShader CreatePerlinNoiseTurbulence(float32 baseFrequencyX, float32 baseFrequencyY, int32 numOctaves, float32 seed, valuetype SkiaSharp.SKSizeI tileSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKShader.CreatePerlinNoiseTurbulence(System.Single,System.Single,System.Int32,System.Single,SkiaSharp.SKSizeI)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.68.0.0</AssemblyVersion>
        <AssemblyVersion>2.80.0.0</AssemblyVersion>
        <AssemblyVersion>2.88.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>SkiaSharp.SKShader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="baseFrequencyX" Type="System.Single" Index="0" FrameworkAlternate="skiasharp-1.68;skiasharp-2.80;skiasharp-2.88" />
        <Parameter Name="baseFrequencyY" Type="System.Single" Index="1" FrameworkAlternate="skiasharp-1.68;skiasharp-2.80;skiasharp-2.88" />
        <Parameter Name="numOctaves" Type="System.Int32" Index="2" FrameworkAlternate="skiasharp-1.68;skiasharp-2.80;skiasharp-2.88" />
        <Parameter Name="seed" Type="System.Single" Index="3" FrameworkAlternate="skiasharp-1.68;skiasharp-2.80;skiasharp-2.88" />
        <Parameter Name="tileSize" Type="SkiaSharp.SKSizeI" Index="4" FrameworkAlternate="skiasharp-1.68;skiasharp-2.80;skiasharp-2.88" />
      </Parameters>
      <Docs>
        <param name="baseFrequencyX">To be added.</param>
        <param name="baseFrequencyY">To be added.</param>
        <param name="numOctaves">To be added.</param>
        <param name="seed">To be added.</param>
        <param name="tileSize">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreatePicture">
      <MemberSignature Language="C#" Value="public static SkiaSharp.SKShader CreatePicture (SkiaSharp.SKPicture src);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class SkiaSharp.SKShader CreatePicture(class SkiaSharp.SKPicture src) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKShader.CreatePicture(SkiaSharp.SKPicture)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.68.0.0</AssemblyVersion>
        <AssemblyVersion>2.80.0.0</AssemblyVersion>
        <AssemblyVersion>2.88.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>SkiaSharp.SKShader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="src" Type="SkiaSharp.SKPicture" Index="0" FrameworkAlternate="skiasharp-1.68;skiasharp-2.80;skiasharp-2.88" />
      </Parameters>
      <Docs>
        <param name="src">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreatePicture">
      <MemberSignature Language="C#" Value="public static SkiaSharp.SKShader CreatePicture (SkiaSharp.SKPicture src, SkiaSharp.SKShaderTileMode tmx, SkiaSharp.SKShaderTileMode tmy);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class SkiaSharp.SKShader CreatePicture(class SkiaSharp.SKPicture src, valuetype SkiaSharp.SKShaderTileMode tmx, valuetype SkiaSharp.SKShaderTileMode tmy) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKShader.CreatePicture(SkiaSharp.SKPicture,SkiaSharp.SKShaderTileMode,SkiaSharp.SKShaderTileMode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.68.0.0</AssemblyVersion>
        <AssemblyVersion>2.80.0.0</AssemblyVersion>
        <AssemblyVersion>2.88.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>SkiaSharp.SKShader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="src" Type="SkiaSharp.SKPicture" Index="0" FrameworkAlternate="skiasharp-1.68;skiasharp-2.80;skiasharp-2.88" />
        <Parameter Name="tmx" Type="SkiaSharp.SKShaderTileMode" Index="1" FrameworkAlternate="skiasharp-1.68;skiasharp-2.80;skiasharp-2.88" />
        <Parameter Name="tmy" Type="SkiaSharp.SKShaderTileMode" Index="2" FrameworkAlternate="skiasharp-1.68;skiasharp-2.80;skiasharp-2.88" />
      </Parameters>
      <Docs>
        <param name="src">The picture to use inside the shader.</param>
        <param name="tmx">The tiling mode to use when sampling the picture in the x-direction.</param>
        <param name="tmy">The tiling mode to use when sampling the picture in the y-direction.</param>
        <summary>Creates a new shader that will draw with the specified picture.</summary>
        <returns>Returns a new <see cref="T:SkiaSharp.SKShader" />, or an empty shader on error. This function never returns null.</returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="CreatePicture">
      <MemberSignature Language="C#" Value="public static SkiaSharp.SKShader CreatePicture (SkiaSharp.SKPicture src, SkiaSharp.SKShaderTileMode tmx, SkiaSharp.SKShaderTileMode tmy, SkiaSharp.SKRect tile);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class SkiaSharp.SKShader CreatePicture(class SkiaSharp.SKPicture src, valuetype SkiaSharp.SKShaderTileMode tmx, valuetype SkiaSharp.SKShaderTileMode tmy, valuetype SkiaSharp.SKRect tile) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKShader.CreatePicture(SkiaSharp.SKPicture,SkiaSharp.SKShaderTileMode,SkiaSharp.SKShaderTileMode,SkiaSharp.SKRect)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.68.0.0</AssemblyVersion>
        <AssemblyVersion>2.80.0.0</AssemblyVersion>
        <AssemblyVersion>2.88.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>SkiaSharp.SKShader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="src" Type="SkiaSharp.SKPicture" Index="0" FrameworkAlternate="skiasharp-1.68;skiasharp-2.80;skiasharp-2.88" />
        <Parameter Name="tmx" Type="SkiaSharp.SKShaderTileMode" Index="1" FrameworkAlternate="skiasharp-1.68;skiasharp-2.80;skiasharp-2.88" />
        <Parameter Name="tmy" Type="SkiaSharp.SKShaderTileMode" Index="2" FrameworkAlternate="skiasharp-1.68;skiasharp-2.80;skiasharp-2.88" />
        <Parameter Name="tile" Type="SkiaSharp.SKRect" Index="3" FrameworkAlternate="skiasharp-1.68;skiasharp-2.80;skiasharp-2.88" />
      </Parameters>
      <Docs>
        <param name="src">The picture to use inside the shader.</param>
        <param name="tmx">The tiling mode to use when sampling the picture in the x-direction.</param>
        <param name="tmy">The tiling mode to use when sampling the picture in the y-direction.</param>
        <param name="tile">The tile rectangle in picture coordinates.</param>
        <summary>Creates a new shader that will draw with the specified picture.</summary>
        <returns>Returns a new <see cref="T:SkiaSharp.SKShader" />, or an empty shader on error. This function never returns null.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[
## Remarks

The tile rectangle represents the subset (or superset) of the picture used when building a tile. It is not affected by
the local matrix and does not imply scaling (only translation and cropping).
]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreatePicture">
      <MemberSignature Language="C#" Value="public static SkiaSharp.SKShader CreatePicture (SkiaSharp.SKPicture src, SkiaSharp.SKShaderTileMode tmx, SkiaSharp.SKShaderTileMode tmy, SkiaSharp.SKMatrix localMatrix, SkiaSharp.SKRect tile);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class SkiaSharp.SKShader CreatePicture(class SkiaSharp.SKPicture src, valuetype SkiaSharp.SKShaderTileMode tmx, valuetype SkiaSharp.SKShaderTileMode tmy, valuetype SkiaSharp.SKMatrix localMatrix, valuetype SkiaSharp.SKRect tile) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKShader.CreatePicture(SkiaSharp.SKPicture,SkiaSharp.SKShaderTileMode,SkiaSharp.SKShaderTileMode,SkiaSharp.SKMatrix,SkiaSharp.SKRect)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.68.0.0</AssemblyVersion>
        <AssemblyVersion>2.80.0.0</AssemblyVersion>
        <AssemblyVersion>2.88.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>SkiaSharp.SKShader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="src" Type="SkiaSharp.SKPicture" Index="0" FrameworkAlternate="skiasharp-1.68;skiasharp-2.80;skiasharp-2.88" />
        <Parameter Name="tmx" Type="SkiaSharp.SKShaderTileMode" Index="1" FrameworkAlternate="skiasharp-1.68;skiasharp-2.80;skiasharp-2.88" />
        <Parameter Name="tmy" Type="SkiaSharp.SKShaderTileMode" Index="2" FrameworkAlternate="skiasharp-1.68;skiasharp-2.80;skiasharp-2.88" />
        <Parameter Name="localMatrix" Type="SkiaSharp.SKMatrix" Index="3" FrameworkAlternate="skiasharp-1.68;skiasharp-2.80;skiasharp-2.88" />
        <Parameter Name="tile" Type="SkiaSharp.SKRect" Index="4" FrameworkAlternate="skiasharp-1.68;skiasharp-2.80;skiasharp-2.88" />
      </Parameters>
      <Docs>
        <param name="src">The picture to use inside the shader.</param>
        <param name="tmx">The tiling mode to use when sampling the picture in the x-direction.</param>
        <param name="tmy">The tiling mode to use when sampling the picture in the y-direction.</param>
        <param name="localMatrix">The matrix to apply before applying the shader.</param>
        <param name="tile">The tile rectangle in picture coordinates.</param>
        <summary>Creates a new shader that will draw with the specified picture.</summary>
        <returns>Returns a new <see cref="T:SkiaSharp.SKShader" />, or an empty shader on error. This function never returns null.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[
## Remarks

The tile rectangle represents the subset (or superset) of the picture used when building a tile. It is not affected by
the local matrix and does not imply scaling (only translation and cropping).
]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateRadialGradient">
      <MemberSignature Language="C#" Value="public static SkiaSharp.SKShader CreateRadialGradient (SkiaSharp.SKPoint center, float radius, SkiaSharp.SKColor[] colors, SkiaSharp.SKShaderTileMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class SkiaSharp.SKShader CreateRadialGradient(valuetype SkiaSharp.SKPoint center, float32 radius, valuetype SkiaSharp.SKColor[] colors, valuetype SkiaSharp.SKShaderTileMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKShader.CreateRadialGradient(SkiaSharp.SKPoint,System.Single,SkiaSharp.SKColor[],SkiaSharp.SKShaderTileMode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.68.0.0</AssemblyVersion>
        <AssemblyVersion>2.80.0.0</AssemblyVersion>
        <AssemblyVersion>2.88.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>SkiaSharp.SKShader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="center" Type="SkiaSharp.SKPoint" Index="0" FrameworkAlternate="skiasharp-1.68;skiasharp-2.80;skiasharp-2.88" />
        <Parameter Name="radius" Type="System.Single" Index="1" FrameworkAlternate="skiasharp-1.68;skiasharp-2.80;skiasharp-2.88" />
        <Parameter Name="colors" Type="SkiaSharp.SKColor[]" Index="2" FrameworkAlternate="skiasharp-1.68;skiasharp-2.80;skiasharp-2.88" />
        <Parameter Name="mode" Type="SkiaSharp.SKShaderTileMode" Index="3" FrameworkAlternate="skiasharp-1.68;skiasharp-2.80;skiasharp-2.88" />
      </Parameters>
      <Docs>
        <param name="center">The center of the circle for this gradient.</param>
        <param name="radius">The positive radius of the circle for this gradient.</param>
        <param name="colors">The array colors to be distributed between the center and edge of the circle.</param>
        <param name="mode">The tiling mode.</param>
        <summary>Creates a shader that generates a radial gradient given the center and radius.</summary>
        <returns>Returns a new <see cref="T:SkiaSharp.SKShader" />, or an empty shader on error. This function never returns null.</returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateRadialGradient">
      <MemberSignature Language="C#" Value="public static SkiaSharp.SKShader CreateRadialGradient (SkiaSharp.SKPoint center, float radius, SkiaSharp.SKColor[] colors, float[] colorPos, SkiaSharp.SKShaderTileMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class SkiaSharp.SKShader CreateRadialGradient(valuetype SkiaSharp.SKPoint center, float32 radius, valuetype SkiaSharp.SKColor[] colors, float32[] colorPos, valuetype SkiaSharp.SKShaderTileMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKShader.CreateRadialGradient(SkiaSharp.SKPoint,System.Single,SkiaSharp.SKColor[],System.Single[],SkiaSharp.SKShaderTileMode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
        <AssemblyVersion>1.68.0.0</AssemblyVersion>
        <AssemblyVersion>2.80.0.0</AssemblyVersion>
        <AssemblyVersion>2.88.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>SkiaSharp.SKShader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="center" Type="SkiaSharp.SKPoint" />
        <Parameter Name="radius" Type="System.Single" />
        <Parameter Name="colors" Type="SkiaSharp.SKColor[]" />
        <Parameter Name="colorPos" Type="System.Single[]" />
        <Parameter Name="mode" Type="SkiaSharp.SKShaderTileMode" />
      </Parameters>
      <Docs>
        <param name="center">The center of the circle for this gradient.</param>
        <param name="radius">The positive radius of the circle for this gradient.</param>
        <param name="colors">The array colors to be distributed between the center and edge of the circle.</param>
        <param name="colorPos">The positions (in the range of 0..1) of each corresponding color, or null to evenly distribute the colors.</param>
        <param name="mode">The tiling mode.</param>
        <summary>Creates a shader that generates a radial gradient given the center and radius.</summary>
        <returns>Returns a new <see cref="T:SkiaSharp.SKShader" />, or an empty shader on error. This function never returns null.</returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateRadialGradient">
      <MemberSignature Language="C#" Value="public static SkiaSharp.SKShader CreateRadialGradient (SkiaSharp.SKPoint center, float radius, SkiaSharp.SKColorF[] colors, SkiaSharp.SKColorSpace colorspace, SkiaSharp.SKShaderTileMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class SkiaSharp.SKShader CreateRadialGradient(valuetype SkiaSharp.SKPoint center, float32 radius, valuetype SkiaSharp.SKColorF[] colors, class SkiaSharp.SKColorSpace colorspace, valuetype SkiaSharp.SKShaderTileMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKShader.CreateRadialGradient(SkiaSharp.SKPoint,System.Single,SkiaSharp.SKColorF[],SkiaSharp.SKColorSpace,SkiaSharp.SKShaderTileMode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.68.0.0</AssemblyVersion>
        <AssemblyVersion>2.80.0.0</AssemblyVersion>
        <AssemblyVersion>2.88.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>SkiaSharp.SKShader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="center" Type="SkiaSharp.SKPoint" Index="0" FrameworkAlternate="skiasharp-1.68;skiasharp-2.80;skiasharp-2.88" />
        <Parameter Name="radius" Type="System.Single" Index="1" FrameworkAlternate="skiasharp-1.68;skiasharp-2.80;skiasharp-2.88" />
        <Parameter Name="colors" Type="SkiaSharp.SKColorF[]" Index="2" FrameworkAlternate="skiasharp-1.68;skiasharp-2.80;skiasharp-2.88" />
        <Parameter Name="colorspace" Type="SkiaSharp.SKColorSpace" Index="3" FrameworkAlternate="skiasharp-1.68;skiasharp-2.80;skiasharp-2.88" />
        <Parameter Name="mode" Type="SkiaSharp.SKShaderTileMode" Index="4" FrameworkAlternate="skiasharp-1.68;skiasharp-2.80;skiasharp-2.88" />
      </Parameters>
      <Docs>
        <param name="center">To be added.</param>
        <param name="radius">To be added.</param>
        <param name="colors">To be added.</param>
        <param name="colorspace">To be added.</param>
        <param name="mode">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateRadialGradient">
      <MemberSignature Language="C#" Value="public static SkiaSharp.SKShader CreateRadialGradient (SkiaSharp.SKPoint center, float radius, SkiaSharp.SKColor[] colors, float[] colorPos, SkiaSharp.SKShaderTileMode mode, SkiaSharp.SKMatrix localMatrix);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class SkiaSharp.SKShader CreateRadialGradient(valuetype SkiaSharp.SKPoint center, float32 radius, valuetype SkiaSharp.SKColor[] colors, float32[] colorPos, valuetype SkiaSharp.SKShaderTileMode mode, valuetype SkiaSharp.SKMatrix localMatrix) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKShader.CreateRadialGradient(SkiaSharp.SKPoint,System.Single,SkiaSharp.SKColor[],System.Single[],SkiaSharp.SKShaderTileMode,SkiaSharp.SKMatrix)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
        <AssemblyVersion>1.68.0.0</AssemblyVersion>
        <AssemblyVersion>2.80.0.0</AssemblyVersion>
        <AssemblyVersion>2.88.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>SkiaSharp.SKShader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="center" Type="SkiaSharp.SKPoint" />
        <Parameter Name="radius" Type="System.Single" />
        <Parameter Name="colors" Type="SkiaSharp.SKColor[]" />
        <Parameter Name="colorPos" Type="System.Single[]" />
        <Parameter Name="mode" Type="SkiaSharp.SKShaderTileMode" />
        <Parameter Name="localMatrix" Type="SkiaSharp.SKMatrix" />
      </Parameters>
      <Docs>
        <param name="center">The center of the circle for this gradient.</param>
        <param name="radius">The positive radius of the circle for this gradient.</param>
        <param name="colors">The array colors to be distributed between the center and edge of the circle.</param>
        <param name="colorPos">The positions (in the range of 0..1) of each corresponding color, or null to evenly distribute the colors.</param>
        <param name="mode">The tiling mode.</param>
        <param name="localMatrix">The matrix to apply before applying the shader.</param>
        <summary>Creates a shader that generates a radial gradient given the center and radius.</summary>
        <returns>Returns a new <see cref="T:SkiaSharp.SKShader" />, or an empty shader on error. This function never returns null.</returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateRadialGradient">
      <MemberSignature Language="C#" Value="public static SkiaSharp.SKShader CreateRadialGradient (SkiaSharp.SKPoint center, float radius, SkiaSharp.SKColorF[] colors, SkiaSharp.SKColorSpace colorspace, float[] colorPos, SkiaSharp.SKShaderTileMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class SkiaSharp.SKShader CreateRadialGradient(valuetype SkiaSharp.SKPoint center, float32 radius, valuetype SkiaSharp.SKColorF[] colors, class SkiaSharp.SKColorSpace colorspace, float32[] colorPos, valuetype SkiaSharp.SKShaderTileMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKShader.CreateRadialGradient(SkiaSharp.SKPoint,System.Single,SkiaSharp.SKColorF[],SkiaSharp.SKColorSpace,System.Single[],SkiaSharp.SKShaderTileMode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.68.0.0</AssemblyVersion>
        <AssemblyVersion>2.80.0.0</AssemblyVersion>
        <AssemblyVersion>2.88.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>SkiaSharp.SKShader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="center" Type="SkiaSharp.SKPoint" Index="0" FrameworkAlternate="skiasharp-1.68;skiasharp-2.80;skiasharp-2.88" />
        <Parameter Name="radius" Type="System.Single" Index="1" FrameworkAlternate="skiasharp-1.68;skiasharp-2.80;skiasharp-2.88" />
        <Parameter Name="colors" Type="SkiaSharp.SKColorF[]" Index="2" FrameworkAlternate="skiasharp-1.68;skiasharp-2.80;skiasharp-2.88" />
        <Parameter Name="colorspace" Type="SkiaSharp.SKColorSpace" Index="3" FrameworkAlternate="skiasharp-1.68;skiasharp-2.80;skiasharp-2.88" />
        <Parameter Name="colorPos" Type="System.Single[]" Index="4" FrameworkAlternate="skiasharp-1.68;skiasharp-2.80;skiasharp-2.88" />
        <Parameter Name="mode" Type="SkiaSharp.SKShaderTileMode" Index="5" FrameworkAlternate="skiasharp-1.68;skiasharp-2.80;skiasharp-2.88" />
      </Parameters>
      <Docs>
        <param name="center">To be added.</param>
        <param name="radius">To be added.</param>
        <param name="colors">To be added.</param>
        <param name="colorspace">To be added.</param>
        <param name="colorPos">To be added.</param>
        <param name="mode">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateRadialGradient">
      <MemberSignature Language="C#" Value="public static SkiaSharp.SKShader CreateRadialGradient (SkiaSharp.SKPoint center, float radius, SkiaSharp.SKColorF[] colors, SkiaSharp.SKColorSpace colorspace, float[] colorPos, SkiaSharp.SKShaderTileMode mode, SkiaSharp.SKMatrix localMatrix);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class SkiaSharp.SKShader CreateRadialGradient(valuetype SkiaSharp.SKPoint center, float32 radius, valuetype SkiaSharp.SKColorF[] colors, class SkiaSharp.SKColorSpace colorspace, float32[] colorPos, valuetype SkiaSharp.SKShaderTileMode mode, valuetype SkiaSharp.SKMatrix localMatrix) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKShader.CreateRadialGradient(SkiaSharp.SKPoint,System.Single,SkiaSharp.SKColorF[],SkiaSharp.SKColorSpace,System.Single[],SkiaSharp.SKShaderTileMode,SkiaSharp.SKMatrix)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.68.0.0</AssemblyVersion>
        <AssemblyVersion>2.80.0.0</AssemblyVersion>
        <AssemblyVersion>2.88.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>SkiaSharp.SKShader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="center" Type="SkiaSharp.SKPoint" Index="0" FrameworkAlternate="skiasharp-1.68;skiasharp-2.80;skiasharp-2.88" />
        <Parameter Name="radius" Type="System.Single" Index="1" FrameworkAlternate="skiasharp-1.68;skiasharp-2.80;skiasharp-2.88" />
        <Parameter Name="colors" Type="SkiaSharp.SKColorF[]" Index="2" FrameworkAlternate="skiasharp-1.68;skiasharp-2.80;skiasharp-2.88" />
        <Parameter Name="colorspace" Type="SkiaSharp.SKColorSpace" Index="3" FrameworkAlternate="skiasharp-1.68;skiasharp-2.80;skiasharp-2.88" />
        <Parameter Name="colorPos" Type="System.Single[]" Index="4" FrameworkAlternate="skiasharp-1.68;skiasharp-2.80;skiasharp-2.88" />
        <Parameter Name="mode" Type="SkiaSharp.SKShaderTileMode" Index="5" FrameworkAlternate="skiasharp-1.68;skiasharp-2.80;skiasharp-2.88" />
        <Parameter Name="localMatrix" Type="SkiaSharp.SKMatrix" Index="6" FrameworkAlternate="skiasharp-1.68;skiasharp-2.80;skiasharp-2.88" />
      </Parameters>
      <Docs>
        <param name="center">To be added.</param>
        <param name="radius">To be added.</param>
        <param name="colors">To be added.</param>
        <param name="colorspace">To be added.</param>
        <param name="colorPos">To be added.</param>
        <param name="mode">To be added.</param>
        <param name="localMatrix">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateSweepGradient">
      <MemberSignature Language="C#" Value="public static SkiaSharp.SKShader CreateSweepGradient (SkiaSharp.SKPoint center, SkiaSharp.SKColor[] colors);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class SkiaSharp.SKShader CreateSweepGradient(valuetype SkiaSharp.SKPoint center, valuetype SkiaSharp.SKColor[] colors) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKShader.CreateSweepGradient(SkiaSharp.SKPoint,SkiaSharp.SKColor[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.68.0.0</AssemblyVersion>
        <AssemblyVersion>2.80.0.0</AssemblyVersion>
        <AssemblyVersion>2.88.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>SkiaSharp.SKShader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="center" Type="SkiaSharp.SKPoint" Index="0" FrameworkAlternate="skiasharp-1.68;skiasharp-2.80;skiasharp-2.88" />
        <Parameter Name="colors" Type="SkiaSharp.SKColor[]" Index="1" FrameworkAlternate="skiasharp-1.68;skiasharp-2.80;skiasharp-2.88" />
      </Parameters>
      <Docs>
        <param name="center">The coordinates of the center of the sweep.</param>
        <param name="colors">The array colors to be distributed around the center.</param>
        <summary>Creates a shader that generates a sweep gradient given a center.</summary>
        <returns>Returns a new <see cref="T:SkiaSharp.SKShader" />, or an empty shader on error. This function never returns null.</returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateSweepGradient">
      <MemberSignature Language="C#" Value="public static SkiaSharp.SKShader CreateSweepGradient (SkiaSharp.SKPoint center, SkiaSharp.SKColor[] colors, float[] colorPos);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class SkiaSharp.SKShader CreateSweepGradient(valuetype SkiaSharp.SKPoint center, valuetype SkiaSharp.SKColor[] colors, float32[] colorPos) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKShader.CreateSweepGradient(SkiaSharp.SKPoint,SkiaSharp.SKColor[],System.Single[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
        <AssemblyVersion>1.68.0.0</AssemblyVersion>
        <AssemblyVersion>2.80.0.0</AssemblyVersion>
        <AssemblyVersion>2.88.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>SkiaSharp.SKShader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="center" Type="SkiaSharp.SKPoint" />
        <Parameter Name="colors" Type="SkiaSharp.SKColor[]" />
        <Parameter Name="colorPos" Type="System.Single[]" />
      </Parameters>
      <Docs>
        <param name="center">The coordinates of the center of the sweep.</param>
        <param name="colors">The array colors to be distributed around the center.</param>
        <param name="colorPos">The positions (in the range of 0..1) of each corresponding color, or null to evenly distribute the colors.</param>
        <summary>Creates a shader that generates a sweep gradient given a center.</summary>
        <returns>Returns a new <see cref="T:SkiaSharp.SKShader" />, or an empty shader on error. This function never returns null.</returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateSweepGradient">
      <MemberSignature Language="C#" Value="public static SkiaSharp.SKShader CreateSweepGradient (SkiaSharp.SKPoint center, SkiaSharp.SKColorF[] colors, SkiaSharp.SKColorSpace colorspace);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class SkiaSharp.SKShader CreateSweepGradient(valuetype SkiaSharp.SKPoint center, valuetype SkiaSharp.SKColorF[] colors, class SkiaSharp.SKColorSpace colorspace) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKShader.CreateSweepGradient(SkiaSharp.SKPoint,SkiaSharp.SKColorF[],SkiaSharp.SKColorSpace)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.68.0.0</AssemblyVersion>
        <AssemblyVersion>2.80.0.0</AssemblyVersion>
        <AssemblyVersion>2.88.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>SkiaSharp.SKShader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="center" Type="SkiaSharp.SKPoint" Index="0" FrameworkAlternate="skiasharp-1.68;skiasharp-2.80;skiasharp-2.88" />
        <Parameter Name="colors" Type="SkiaSharp.SKColorF[]" Index="1" FrameworkAlternate="skiasharp-1.68;skiasharp-2.80;skiasharp-2.88" />
        <Parameter Name="colorspace" Type="SkiaSharp.SKColorSpace" Index="2" FrameworkAlternate="skiasharp-1.68;skiasharp-2.80;skiasharp-2.88" />
      </Parameters>
      <Docs>
        <param name="center">To be added.</param>
        <param name="colors">To be added.</param>
        <param name="colorspace">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateSweepGradient">
      <MemberSignature Language="C#" Value="public static SkiaSharp.SKShader CreateSweepGradient (SkiaSharp.SKPoint center, SkiaSharp.SKColor[] colors, float[] colorPos, SkiaSharp.SKMatrix localMatrix);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class SkiaSharp.SKShader CreateSweepGradient(valuetype SkiaSharp.SKPoint center, valuetype SkiaSharp.SKColor[] colors, float32[] colorPos, valuetype SkiaSharp.SKMatrix localMatrix) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKShader.CreateSweepGradient(SkiaSharp.SKPoint,SkiaSharp.SKColor[],System.Single[],SkiaSharp.SKMatrix)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
        <AssemblyVersion>1.68.0.0</AssemblyVersion>
        <AssemblyVersion>2.80.0.0</AssemblyVersion>
        <AssemblyVersion>2.88.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>SkiaSharp.SKShader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="center" Type="SkiaSharp.SKPoint" />
        <Parameter Name="colors" Type="SkiaSharp.SKColor[]" />
        <Parameter Name="colorPos" Type="System.Single[]" />
        <Parameter Name="localMatrix" Type="SkiaSharp.SKMatrix" />
      </Parameters>
      <Docs>
        <param name="center">The coordinates of the center of the sweep.</param>
        <param name="colors">The array colors to be distributed around the center.</param>
        <param name="colorPos">The positions (in the range of 0..1) of each corresponding color, or null to evenly distribute the colors.</param>
        <param name="localMatrix">The matrix to apply before applying the shader.</param>
        <summary>Creates a shader that generates a sweep gradient given a center.</summary>
        <returns>Returns a new <see cref="T:SkiaSharp.SKShader" />, or an empty shader on error. This function never returns null.</returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateSweepGradient">
      <MemberSignature Language="C#" Value="public static SkiaSharp.SKShader CreateSweepGradient (SkiaSharp.SKPoint center, SkiaSharp.SKColorF[] colors, SkiaSharp.SKColorSpace colorspace, float[] colorPos);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class SkiaSharp.SKShader CreateSweepGradient(valuetype SkiaSharp.SKPoint center, valuetype SkiaSharp.SKColorF[] colors, class SkiaSharp.SKColorSpace colorspace, float32[] colorPos) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKShader.CreateSweepGradient(SkiaSharp.SKPoint,SkiaSharp.SKColorF[],SkiaSharp.SKColorSpace,System.Single[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.68.0.0</AssemblyVersion>
        <AssemblyVersion>2.80.0.0</AssemblyVersion>
        <AssemblyVersion>2.88.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>SkiaSharp.SKShader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="center" Type="SkiaSharp.SKPoint" Index="0" FrameworkAlternate="skiasharp-1.68;skiasharp-2.80;skiasharp-2.88" />
        <Parameter Name="colors" Type="SkiaSharp.SKColorF[]" Index="1" FrameworkAlternate="skiasharp-1.68;skiasharp-2.80;skiasharp-2.88" />
        <Parameter Name="colorspace" Type="SkiaSharp.SKColorSpace" Index="2" FrameworkAlternate="skiasharp-1.68;skiasharp-2.80;skiasharp-2.88" />
        <Parameter Name="colorPos" Type="System.Single[]" Index="3" FrameworkAlternate="skiasharp-1.68;skiasharp-2.80;skiasharp-2.88" />
      </Parameters>
      <Docs>
        <param name="center">To be added.</param>
        <param name="colors">To be added.</param>
        <param name="colorspace">To be added.</param>
        <param name="colorPos">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateSweepGradient">
      <MemberSignature Language="C#" Value="public static SkiaSharp.SKShader CreateSweepGradient (SkiaSharp.SKPoint center, SkiaSharp.SKColor[] colors, SkiaSharp.SKShaderTileMode tileMode, float startAngle, float endAngle);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class SkiaSharp.SKShader CreateSweepGradient(valuetype SkiaSharp.SKPoint center, valuetype SkiaSharp.SKColor[] colors, valuetype SkiaSharp.SKShaderTileMode tileMode, float32 startAngle, float32 endAngle) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKShader.CreateSweepGradient(SkiaSharp.SKPoint,SkiaSharp.SKColor[],SkiaSharp.SKShaderTileMode,System.Single,System.Single)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.68.0.0</AssemblyVersion>
        <AssemblyVersion>2.80.0.0</AssemblyVersion>
        <AssemblyVersion>2.88.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>SkiaSharp.SKShader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="center" Type="SkiaSharp.SKPoint" Index="0" FrameworkAlternate="skiasharp-1.68;skiasharp-2.80;skiasharp-2.88" />
        <Parameter Name="colors" Type="SkiaSharp.SKColor[]" Index="1" FrameworkAlternate="skiasharp-1.68;skiasharp-2.80;skiasharp-2.88" />
        <Parameter Name="tileMode" Type="SkiaSharp.SKShaderTileMode" Index="2" FrameworkAlternate="skiasharp-1.68;skiasharp-2.80;skiasharp-2.88" />
        <Parameter Name="startAngle" Type="System.Single" Index="3" FrameworkAlternate="skiasharp-1.68;skiasharp-2.80;skiasharp-2.88" />
        <Parameter Name="endAngle" Type="System.Single" Index="4" FrameworkAlternate="skiasharp-1.68;skiasharp-2.80;skiasharp-2.88" />
      </Parameters>
      <Docs>
        <param name="center">The coordinates of the center of the sweep.</param>
        <param name="colors">The array colors to be distributed around the center.</param>
        <param name="tileMode">The tiling mode.</param>
        <param name="startAngle">The start of the angular range.</param>
        <param name="endAngle">The end of the angular range.</param>
        <summary>Creates a shader that generates a sweep gradient given a center.</summary>
        <returns>Returns a new <see cref="T:SkiaSharp.SKShader" />, or an empty shader on error. This function never returns null.</returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateSweepGradient">
      <MemberSignature Language="C#" Value="public static SkiaSharp.SKShader CreateSweepGradient (SkiaSharp.SKPoint center, SkiaSharp.SKColorF[] colors, SkiaSharp.SKColorSpace colorspace, float[] colorPos, SkiaSharp.SKMatrix localMatrix);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class SkiaSharp.SKShader CreateSweepGradient(valuetype SkiaSharp.SKPoint center, valuetype SkiaSharp.SKColorF[] colors, class SkiaSharp.SKColorSpace colorspace, float32[] colorPos, valuetype SkiaSharp.SKMatrix localMatrix) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKShader.CreateSweepGradient(SkiaSharp.SKPoint,SkiaSharp.SKColorF[],SkiaSharp.SKColorSpace,System.Single[],SkiaSharp.SKMatrix)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.68.0.0</AssemblyVersion>
        <AssemblyVersion>2.80.0.0</AssemblyVersion>
        <AssemblyVersion>2.88.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>SkiaSharp.SKShader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="center" Type="SkiaSharp.SKPoint" Index="0" FrameworkAlternate="skiasharp-1.68;skiasharp-2.80;skiasharp-2.88" />
        <Parameter Name="colors" Type="SkiaSharp.SKColorF[]" Index="1" FrameworkAlternate="skiasharp-1.68;skiasharp-2.80;skiasharp-2.88" />
        <Parameter Name="colorspace" Type="SkiaSharp.SKColorSpace" Index="2" FrameworkAlternate="skiasharp-1.68;skiasharp-2.80;skiasharp-2.88" />
        <Parameter Name="colorPos" Type="System.Single[]" Index="3" FrameworkAlternate="skiasharp-1.68;skiasharp-2.80;skiasharp-2.88" />
        <Parameter Name="localMatrix" Type="SkiaSharp.SKMatrix" Index="4" FrameworkAlternate="skiasharp-1.68;skiasharp-2.80;skiasharp-2.88" />
      </Parameters>
      <Docs>
        <param name="center">To be added.</param>
        <param name="colors">To be added.</param>
        <param name="colorspace">To be added.</param>
        <param name="colorPos">To be added.</param>
        <param name="localMatrix">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateSweepGradient">
      <MemberSignature Language="C#" Value="public static SkiaSharp.SKShader CreateSweepGradient (SkiaSharp.SKPoint center, SkiaSharp.SKColor[] colors, float[] colorPos, SkiaSharp.SKShaderTileMode tileMode, float startAngle, float endAngle);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class SkiaSharp.SKShader CreateSweepGradient(valuetype SkiaSharp.SKPoint center, valuetype SkiaSharp.SKColor[] colors, float32[] colorPos, valuetype SkiaSharp.SKShaderTileMode tileMode, float32 startAngle, float32 endAngle) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKShader.CreateSweepGradient(SkiaSharp.SKPoint,SkiaSharp.SKColor[],System.Single[],SkiaSharp.SKShaderTileMode,System.Single,System.Single)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.68.0.0</AssemblyVersion>
        <AssemblyVersion>2.80.0.0</AssemblyVersion>
        <AssemblyVersion>2.88.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>SkiaSharp.SKShader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="center" Type="SkiaSharp.SKPoint" Index="0" FrameworkAlternate="skiasharp-1.68;skiasharp-2.80;skiasharp-2.88" />
        <Parameter Name="colors" Type="SkiaSharp.SKColor[]" Index="1" FrameworkAlternate="skiasharp-1.68;skiasharp-2.80;skiasharp-2.88" />
        <Parameter Name="colorPos" Type="System.Single[]" Index="2" FrameworkAlternate="skiasharp-1.68;skiasharp-2.80;skiasharp-2.88" />
        <Parameter Name="tileMode" Type="SkiaSharp.SKShaderTileMode" Index="3" FrameworkAlternate="skiasharp-1.68;skiasharp-2.80;skiasharp-2.88" />
        <Parameter Name="startAngle" Type="System.Single" Index="4" FrameworkAlternate="skiasharp-1.68;skiasharp-2.80;skiasharp-2.88" />
        <Parameter Name="endAngle" Type="System.Single" Index="5" FrameworkAlternate="skiasharp-1.68;skiasharp-2.80;skiasharp-2.88" />
      </Parameters>
      <Docs>
        <param name="center">The coordinates of the center of the sweep.</param>
        <param name="colors">The array colors to be distributed around the center.</param>
        <param name="colorPos">The positions (in the range of 0..1) of each corresponding color, or null to evenly distribute the colors.</param>
        <param name="tileMode">The tiling mode.</param>
        <param name="startAngle">The start of the angular range.</param>
        <param name="endAngle">The end of the angular range.</param>
        <summary>Creates a shader that generates a sweep gradient given a center.</summary>
        <returns>Returns a new <see cref="T:SkiaSharp.SKShader" />, or an empty shader on error. This function never returns null.</returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateSweepGradient">
      <MemberSignature Language="C#" Value="public static SkiaSharp.SKShader CreateSweepGradient (SkiaSharp.SKPoint center, SkiaSharp.SKColorF[] colors, SkiaSharp.SKColorSpace colorspace, SkiaSharp.SKShaderTileMode tileMode, float startAngle, float endAngle);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class SkiaSharp.SKShader CreateSweepGradient(valuetype SkiaSharp.SKPoint center, valuetype SkiaSharp.SKColorF[] colors, class SkiaSharp.SKColorSpace colorspace, valuetype SkiaSharp.SKShaderTileMode tileMode, float32 startAngle, float32 endAngle) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKShader.CreateSweepGradient(SkiaSharp.SKPoint,SkiaSharp.SKColorF[],SkiaSharp.SKColorSpace,SkiaSharp.SKShaderTileMode,System.Single,System.Single)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.68.0.0</AssemblyVersion>
        <AssemblyVersion>2.80.0.0</AssemblyVersion>
        <AssemblyVersion>2.88.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>SkiaSharp.SKShader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="center" Type="SkiaSharp.SKPoint" Index="0" FrameworkAlternate="skiasharp-1.68;skiasharp-2.80;skiasharp-2.88" />
        <Parameter Name="colors" Type="SkiaSharp.SKColorF[]" Index="1" FrameworkAlternate="skiasharp-1.68;skiasharp-2.80;skiasharp-2.88" />
        <Parameter Name="colorspace" Type="SkiaSharp.SKColorSpace" Index="2" FrameworkAlternate="skiasharp-1.68;skiasharp-2.80;skiasharp-2.88" />
        <Parameter Name="tileMode" Type="SkiaSharp.SKShaderTileMode" Index="3" FrameworkAlternate="skiasharp-1.68;skiasharp-2.80;skiasharp-2.88" />
        <Parameter Name="startAngle" Type="System.Single" Index="4" FrameworkAlternate="skiasharp-1.68;skiasharp-2.80;skiasharp-2.88" />
        <Parameter Name="endAngle" Type="System.Single" Index="5" FrameworkAlternate="skiasharp-1.68;skiasharp-2.80;skiasharp-2.88" />
      </Parameters>
      <Docs>
        <param name="center">To be added.</param>
        <param name="colors">To be added.</param>
        <param name="colorspace">To be added.</param>
        <param name="tileMode">To be added.</param>
        <param name="startAngle">To be added.</param>
        <param name="endAngle">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateSweepGradient">
      <MemberSignature Language="C#" Value="public static SkiaSharp.SKShader CreateSweepGradient (SkiaSharp.SKPoint center, SkiaSharp.SKColor[] colors, float[] colorPos, SkiaSharp.SKShaderTileMode tileMode, float startAngle, float endAngle, SkiaSharp.SKMatrix localMatrix);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class SkiaSharp.SKShader CreateSweepGradient(valuetype SkiaSharp.SKPoint center, valuetype SkiaSharp.SKColor[] colors, float32[] colorPos, valuetype SkiaSharp.SKShaderTileMode tileMode, float32 startAngle, float32 endAngle, valuetype SkiaSharp.SKMatrix localMatrix) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKShader.CreateSweepGradient(SkiaSharp.SKPoint,SkiaSharp.SKColor[],System.Single[],SkiaSharp.SKShaderTileMode,System.Single,System.Single,SkiaSharp.SKMatrix)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.68.0.0</AssemblyVersion>
        <AssemblyVersion>2.80.0.0</AssemblyVersion>
        <AssemblyVersion>2.88.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>SkiaSharp.SKShader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="center" Type="SkiaSharp.SKPoint" Index="0" FrameworkAlternate="skiasharp-1.68;skiasharp-2.80;skiasharp-2.88" />
        <Parameter Name="colors" Type="SkiaSharp.SKColor[]" Index="1" FrameworkAlternate="skiasharp-1.68;skiasharp-2.80;skiasharp-2.88" />
        <Parameter Name="colorPos" Type="System.Single[]" Index="2" FrameworkAlternate="skiasharp-1.68;skiasharp-2.80;skiasharp-2.88" />
        <Parameter Name="tileMode" Type="SkiaSharp.SKShaderTileMode" Index="3" FrameworkAlternate="skiasharp-1.68;skiasharp-2.80;skiasharp-2.88" />
        <Parameter Name="startAngle" Type="System.Single" Index="4" FrameworkAlternate="skiasharp-1.68;skiasharp-2.80;skiasharp-2.88" />
        <Parameter Name="endAngle" Type="System.Single" Index="5" FrameworkAlternate="skiasharp-1.68;skiasharp-2.80;skiasharp-2.88" />
        <Parameter Name="localMatrix" Type="SkiaSharp.SKMatrix" Index="6" FrameworkAlternate="skiasharp-1.68;skiasharp-2.80;skiasharp-2.88" />
      </Parameters>
      <Docs>
        <param name="center">The coordinates of the center of the sweep.</param>
        <param name="colors">The array colors to be distributed around the center.</param>
        <param name="colorPos">The positions (in the range of 0..1) of each corresponding color, or null to evenly distribute the colors.</param>
        <param name="tileMode">The tiling mode.</param>
        <param name="startAngle">The start of the angular range.</param>
        <param name="endAngle">The end of the angular range.</param>
        <param name="localMatrix">The matrix to apply before applying the shader.</param>
        <summary>Creates a shader that generates a sweep gradient given a center.</summary>
        <returns>Returns a new <see cref="T:SkiaSharp.SKShader" />, or an empty shader on error. This function never returns null.</returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateSweepGradient">
      <MemberSignature Language="C#" Value="public static SkiaSharp.SKShader CreateSweepGradient (SkiaSharp.SKPoint center, SkiaSharp.SKColorF[] colors, SkiaSharp.SKColorSpace colorspace, float[] colorPos, SkiaSharp.SKShaderTileMode tileMode, float startAngle, float endAngle);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class SkiaSharp.SKShader CreateSweepGradient(valuetype SkiaSharp.SKPoint center, valuetype SkiaSharp.SKColorF[] colors, class SkiaSharp.SKColorSpace colorspace, float32[] colorPos, valuetype SkiaSharp.SKShaderTileMode tileMode, float32 startAngle, float32 endAngle) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKShader.CreateSweepGradient(SkiaSharp.SKPoint,SkiaSharp.SKColorF[],SkiaSharp.SKColorSpace,System.Single[],SkiaSharp.SKShaderTileMode,System.Single,System.Single)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.68.0.0</AssemblyVersion>
        <AssemblyVersion>2.80.0.0</AssemblyVersion>
        <AssemblyVersion>2.88.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>SkiaSharp.SKShader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="center" Type="SkiaSharp.SKPoint" Index="0" FrameworkAlternate="skiasharp-1.68;skiasharp-2.80;skiasharp-2.88" />
        <Parameter Name="colors" Type="SkiaSharp.SKColorF[]" Index="1" FrameworkAlternate="skiasharp-1.68;skiasharp-2.80;skiasharp-2.88" />
        <Parameter Name="colorspace" Type="SkiaSharp.SKColorSpace" Index="2" FrameworkAlternate="skiasharp-1.68;skiasharp-2.80;skiasharp-2.88" />
        <Parameter Name="colorPos" Type="System.Single[]" Index="3" FrameworkAlternate="skiasharp-1.68;skiasharp-2.80;skiasharp-2.88" />
        <Parameter Name="tileMode" Type="SkiaSharp.SKShaderTileMode" Index="4" FrameworkAlternate="skiasharp-1.68;skiasharp-2.80;skiasharp-2.88" />
        <Parameter Name="startAngle" Type="System.Single" Index="5" FrameworkAlternate="skiasharp-1.68;skiasharp-2.80;skiasharp-2.88" />
        <Parameter Name="endAngle" Type="System.Single" Index="6" FrameworkAlternate="skiasharp-1.68;skiasharp-2.80;skiasharp-2.88" />
      </Parameters>
      <Docs>
        <param name="center">To be added.</param>
        <param name="colors">To be added.</param>
        <param name="colorspace">To be added.</param>
        <param name="colorPos">To be added.</param>
        <param name="tileMode">To be added.</param>
        <param name="startAngle">To be added.</param>
        <param name="endAngle">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateSweepGradient">
      <MemberSignature Language="C#" Value="public static SkiaSharp.SKShader CreateSweepGradient (SkiaSharp.SKPoint center, SkiaSharp.SKColorF[] colors, SkiaSharp.SKColorSpace colorspace, float[] colorPos, SkiaSharp.SKShaderTileMode tileMode, float startAngle, float endAngle, SkiaSharp.SKMatrix localMatrix);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class SkiaSharp.SKShader CreateSweepGradient(valuetype SkiaSharp.SKPoint center, valuetype SkiaSharp.SKColorF[] colors, class SkiaSharp.SKColorSpace colorspace, float32[] colorPos, valuetype SkiaSharp.SKShaderTileMode tileMode, float32 startAngle, float32 endAngle, valuetype SkiaSharp.SKMatrix localMatrix) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKShader.CreateSweepGradient(SkiaSharp.SKPoint,SkiaSharp.SKColorF[],SkiaSharp.SKColorSpace,System.Single[],SkiaSharp.SKShaderTileMode,System.Single,System.Single,SkiaSharp.SKMatrix)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.68.0.0</AssemblyVersion>
        <AssemblyVersion>2.80.0.0</AssemblyVersion>
        <AssemblyVersion>2.88.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>SkiaSharp.SKShader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="center" Type="SkiaSharp.SKPoint" Index="0" FrameworkAlternate="skiasharp-1.68;skiasharp-2.80;skiasharp-2.88" />
        <Parameter Name="colors" Type="SkiaSharp.SKColorF[]" Index="1" FrameworkAlternate="skiasharp-1.68;skiasharp-2.80;skiasharp-2.88" />
        <Parameter Name="colorspace" Type="SkiaSharp.SKColorSpace" Index="2" FrameworkAlternate="skiasharp-1.68;skiasharp-2.80;skiasharp-2.88" />
        <Parameter Name="colorPos" Type="System.Single[]" Index="3" FrameworkAlternate="skiasharp-1.68;skiasharp-2.80;skiasharp-2.88" />
        <Parameter Name="tileMode" Type="SkiaSharp.SKShaderTileMode" Index="4" FrameworkAlternate="skiasharp-1.68;skiasharp-2.80;skiasharp-2.88" />
        <Parameter Name="startAngle" Type="System.Single" Index="5" FrameworkAlternate="skiasharp-1.68;skiasharp-2.80;skiasharp-2.88" />
        <Parameter Name="endAngle" Type="System.Single" Index="6" FrameworkAlternate="skiasharp-1.68;skiasharp-2.80;skiasharp-2.88" />
        <Parameter Name="localMatrix" Type="SkiaSharp.SKMatrix" Index="7" FrameworkAlternate="skiasharp-1.68;skiasharp-2.80;skiasharp-2.88" />
      </Parameters>
      <Docs>
        <param name="center">To be added.</param>
        <param name="colors">To be added.</param>
        <param name="colorspace">To be added.</param>
        <param name="colorPos">To be added.</param>
        <param name="tileMode">To be added.</param>
        <param name="startAngle">To be added.</param>
        <param name="endAngle">To be added.</param>
        <param name="localMatrix">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateTwoPointConicalGradient">
      <MemberSignature Language="C#" Value="public static SkiaSharp.SKShader CreateTwoPointConicalGradient (SkiaSharp.SKPoint start, float startRadius, SkiaSharp.SKPoint end, float endRadius, SkiaSharp.SKColor[] colors, SkiaSharp.SKShaderTileMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class SkiaSharp.SKShader CreateTwoPointConicalGradient(valuetype SkiaSharp.SKPoint start, float32 startRadius, valuetype SkiaSharp.SKPoint end, float32 endRadius, valuetype SkiaSharp.SKColor[] colors, valuetype SkiaSharp.SKShaderTileMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKShader.CreateTwoPointConicalGradient(SkiaSharp.SKPoint,System.Single,SkiaSharp.SKPoint,System.Single,SkiaSharp.SKColor[],SkiaSharp.SKShaderTileMode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.68.0.0</AssemblyVersion>
        <AssemblyVersion>2.80.0.0</AssemblyVersion>
        <AssemblyVersion>2.88.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>SkiaSharp.SKShader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="start" Type="SkiaSharp.SKPoint" Index="0" FrameworkAlternate="skiasharp-1.68;skiasharp-2.80;skiasharp-2.88" />
        <Parameter Name="startRadius" Type="System.Single" Index="1" FrameworkAlternate="skiasharp-1.68;skiasharp-2.80;skiasharp-2.88" />
        <Parameter Name="end" Type="SkiaSharp.SKPoint" Index="2" FrameworkAlternate="skiasharp-1.68;skiasharp-2.80;skiasharp-2.88" />
        <Parameter Name="endRadius" Type="System.Single" Index="3" FrameworkAlternate="skiasharp-1.68;skiasharp-2.80;skiasharp-2.88" />
        <Parameter Name="colors" Type="SkiaSharp.SKColor[]" Index="4" FrameworkAlternate="skiasharp-1.68;skiasharp-2.80;skiasharp-2.88" />
        <Parameter Name="mode" Type="SkiaSharp.SKShaderTileMode" Index="5" FrameworkAlternate="skiasharp-1.68;skiasharp-2.80;skiasharp-2.88" />
      </Parameters>
      <Docs>
        <param name="start">The coordinates for the starting point.</param>
        <param name="startRadius">The radius at the starting point.</param>
        <param name="end">The coordinates for the end point.</param>
        <param name="endRadius">The radius at the end point.</param>
        <param name="colors">The array colors to be distributed between the two points.</param>
        <param name="mode">The tiling mode.</param>
        <summary>Creates a shader that generates a conical gradient given two circles.</summary>
        <returns>Returns a new <see cref="T:SkiaSharp.SKShader" />, or null on error.</returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateTwoPointConicalGradient">
      <MemberSignature Language="C#" Value="public static SkiaSharp.SKShader CreateTwoPointConicalGradient (SkiaSharp.SKPoint start, float startRadius, SkiaSharp.SKPoint end, float endRadius, SkiaSharp.SKColor[] colors, float[] colorPos, SkiaSharp.SKShaderTileMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class SkiaSharp.SKShader CreateTwoPointConicalGradient(valuetype SkiaSharp.SKPoint start, float32 startRadius, valuetype SkiaSharp.SKPoint end, float32 endRadius, valuetype SkiaSharp.SKColor[] colors, float32[] colorPos, valuetype SkiaSharp.SKShaderTileMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKShader.CreateTwoPointConicalGradient(SkiaSharp.SKPoint,System.Single,SkiaSharp.SKPoint,System.Single,SkiaSharp.SKColor[],System.Single[],SkiaSharp.SKShaderTileMode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
        <AssemblyVersion>1.68.0.0</AssemblyVersion>
        <AssemblyVersion>2.80.0.0</AssemblyVersion>
        <AssemblyVersion>2.88.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>SkiaSharp.SKShader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="start" Type="SkiaSharp.SKPoint" />
        <Parameter Name="startRadius" Type="System.Single" />
        <Parameter Name="end" Type="SkiaSharp.SKPoint" />
        <Parameter Name="endRadius" Type="System.Single" />
        <Parameter Name="colors" Type="SkiaSharp.SKColor[]" />
        <Parameter Name="colorPos" Type="System.Single[]" />
        <Parameter Name="mode" Type="SkiaSharp.SKShaderTileMode" />
      </Parameters>
      <Docs>
        <param name="start">The coordinates for the starting point.</param>
        <param name="startRadius">The radius at the starting point.</param>
        <param name="end">The coordinates for the end point.</param>
        <param name="endRadius">The radius at the end point.</param>
        <param name="colors">The array colors to be distributed between the two points.</param>
        <param name="colorPos">The positions (in the range of 0..1) of each corresponding color, or null to evenly distribute the colors.</param>
        <param name="mode">The tiling mode.</param>
        <summary>Creates a shader that generates a conical gradient given two circles.</summary>
        <returns>Returns a new <see cref="T:SkiaSharp.SKShader" />, or null on error.</returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateTwoPointConicalGradient">
      <MemberSignature Language="C#" Value="public static SkiaSharp.SKShader CreateTwoPointConicalGradient (SkiaSharp.SKPoint start, float startRadius, SkiaSharp.SKPoint end, float endRadius, SkiaSharp.SKColorF[] colors, SkiaSharp.SKColorSpace colorspace, SkiaSharp.SKShaderTileMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class SkiaSharp.SKShader CreateTwoPointConicalGradient(valuetype SkiaSharp.SKPoint start, float32 startRadius, valuetype SkiaSharp.SKPoint end, float32 endRadius, valuetype SkiaSharp.SKColorF[] colors, class SkiaSharp.SKColorSpace colorspace, valuetype SkiaSharp.SKShaderTileMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKShader.CreateTwoPointConicalGradient(SkiaSharp.SKPoint,System.Single,SkiaSharp.SKPoint,System.Single,SkiaSharp.SKColorF[],SkiaSharp.SKColorSpace,SkiaSharp.SKShaderTileMode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.68.0.0</AssemblyVersion>
        <AssemblyVersion>2.80.0.0</AssemblyVersion>
        <AssemblyVersion>2.88.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>SkiaSharp.SKShader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="start" Type="SkiaSharp.SKPoint" Index="0" FrameworkAlternate="skiasharp-1.68;skiasharp-2.80;skiasharp-2.88" />
        <Parameter Name="startRadius" Type="System.Single" Index="1" FrameworkAlternate="skiasharp-1.68;skiasharp-2.80;skiasharp-2.88" />
        <Parameter Name="end" Type="SkiaSharp.SKPoint" Index="2" FrameworkAlternate="skiasharp-1.68;skiasharp-2.80;skiasharp-2.88" />
        <Parameter Name="endRadius" Type="System.Single" Index="3" FrameworkAlternate="skiasharp-1.68;skiasharp-2.80;skiasharp-2.88" />
        <Parameter Name="colors" Type="SkiaSharp.SKColorF[]" Index="4" FrameworkAlternate="skiasharp-1.68;skiasharp-2.80;skiasharp-2.88" />
        <Parameter Name="colorspace" Type="SkiaSharp.SKColorSpace" Index="5" FrameworkAlternate="skiasharp-1.68;skiasharp-2.80;skiasharp-2.88" />
        <Parameter Name="mode" Type="SkiaSharp.SKShaderTileMode" Index="6" FrameworkAlternate="skiasharp-1.68;skiasharp-2.80;skiasharp-2.88" />
      </Parameters>
      <Docs>
        <param name="start">To be added.</param>
        <param name="startRadius">To be added.</param>
        <param name="end">To be added.</param>
        <param name="endRadius">To be added.</param>
        <param name="colors">To be added.</param>
        <param name="colorspace">To be added.</param>
        <param name="mode">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateTwoPointConicalGradient">
      <MemberSignature Language="C#" Value="public static SkiaSharp.SKShader CreateTwoPointConicalGradient (SkiaSharp.SKPoint start, float startRadius, SkiaSharp.SKPoint end, float endRadius, SkiaSharp.SKColor[] colors, float[] colorPos, SkiaSharp.SKShaderTileMode mode, SkiaSharp.SKMatrix localMatrix);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class SkiaSharp.SKShader CreateTwoPointConicalGradient(valuetype SkiaSharp.SKPoint start, float32 startRadius, valuetype SkiaSharp.SKPoint end, float32 endRadius, valuetype SkiaSharp.SKColor[] colors, float32[] colorPos, valuetype SkiaSharp.SKShaderTileMode mode, valuetype SkiaSharp.SKMatrix localMatrix) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKShader.CreateTwoPointConicalGradient(SkiaSharp.SKPoint,System.Single,SkiaSharp.SKPoint,System.Single,SkiaSharp.SKColor[],System.Single[],SkiaSharp.SKShaderTileMode,SkiaSharp.SKMatrix)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
        <AssemblyVersion>1.68.0.0</AssemblyVersion>
        <AssemblyVersion>2.80.0.0</AssemblyVersion>
        <AssemblyVersion>2.88.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>SkiaSharp.SKShader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="start" Type="SkiaSharp.SKPoint" />
        <Parameter Name="startRadius" Type="System.Single" />
        <Parameter Name="end" Type="SkiaSharp.SKPoint" />
        <Parameter Name="endRadius" Type="System.Single" />
        <Parameter Name="colors" Type="SkiaSharp.SKColor[]" />
        <Parameter Name="colorPos" Type="System.Single[]" />
        <Parameter Name="mode" Type="SkiaSharp.SKShaderTileMode" />
        <Parameter Name="localMatrix" Type="SkiaSharp.SKMatrix" />
      </Parameters>
      <Docs>
        <param name="start">The coordinates for the starting point.</param>
        <param name="startRadius">The radius at the starting point.</param>
        <param name="end">The coordinates for the end point.</param>
        <param name="endRadius">The radius at the end point.</param>
        <param name="colors">The array colors to be distributed between the two points.</param>
        <param name="colorPos">The positions (in the range of 0..1) of each corresponding color, or null to evenly distribute the colors.</param>
        <param name="mode">The tiling mode.</param>
        <param name="localMatrix">The matrix to apply before applying the shader.</param>
        <summary>Creates a shader that generates a conical gradient given two circles.</summary>
        <returns>Returns a new <see cref="T:SkiaSharp.SKShader" />, or an empty shader on error. This function never returns null.</returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateTwoPointConicalGradient">
      <MemberSignature Language="C#" Value="public static SkiaSharp.SKShader CreateTwoPointConicalGradient (SkiaSharp.SKPoint start, float startRadius, SkiaSharp.SKPoint end, float endRadius, SkiaSharp.SKColorF[] colors, SkiaSharp.SKColorSpace colorspace, float[] colorPos, SkiaSharp.SKShaderTileMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class SkiaSharp.SKShader CreateTwoPointConicalGradient(valuetype SkiaSharp.SKPoint start, float32 startRadius, valuetype SkiaSharp.SKPoint end, float32 endRadius, valuetype SkiaSharp.SKColorF[] colors, class SkiaSharp.SKColorSpace colorspace, float32[] colorPos, valuetype SkiaSharp.SKShaderTileMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKShader.CreateTwoPointConicalGradient(SkiaSharp.SKPoint,System.Single,SkiaSharp.SKPoint,System.Single,SkiaSharp.SKColorF[],SkiaSharp.SKColorSpace,System.Single[],SkiaSharp.SKShaderTileMode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.68.0.0</AssemblyVersion>
        <AssemblyVersion>2.80.0.0</AssemblyVersion>
        <AssemblyVersion>2.88.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>SkiaSharp.SKShader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="start" Type="SkiaSharp.SKPoint" Index="0" FrameworkAlternate="skiasharp-1.68;skiasharp-2.80;skiasharp-2.88" />
        <Parameter Name="startRadius" Type="System.Single" Index="1" FrameworkAlternate="skiasharp-1.68;skiasharp-2.80;skiasharp-2.88" />
        <Parameter Name="end" Type="SkiaSharp.SKPoint" Index="2" FrameworkAlternate="skiasharp-1.68;skiasharp-2.80;skiasharp-2.88" />
        <Parameter Name="endRadius" Type="System.Single" Index="3" FrameworkAlternate="skiasharp-1.68;skiasharp-2.80;skiasharp-2.88" />
        <Parameter Name="colors" Type="SkiaSharp.SKColorF[]" Index="4" FrameworkAlternate="skiasharp-1.68;skiasharp-2.80;skiasharp-2.88" />
        <Parameter Name="colorspace" Type="SkiaSharp.SKColorSpace" Index="5" FrameworkAlternate="skiasharp-1.68;skiasharp-2.80;skiasharp-2.88" />
        <Parameter Name="colorPos" Type="System.Single[]" Index="6" FrameworkAlternate="skiasharp-1.68;skiasharp-2.80;skiasharp-2.88" />
        <Parameter Name="mode" Type="SkiaSharp.SKShaderTileMode" Index="7" FrameworkAlternate="skiasharp-1.68;skiasharp-2.80;skiasharp-2.88" />
      </Parameters>
      <Docs>
        <param name="start">To be added.</param>
        <param name="startRadius">To be added.</param>
        <param name="end">To be added.</param>
        <param name="endRadius">To be added.</param>
        <param name="colors">To be added.</param>
        <param name="colorspace">To be added.</param>
        <param name="colorPos">To be added.</param>
        <param name="mode">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateTwoPointConicalGradient">
      <MemberSignature Language="C#" Value="public static SkiaSharp.SKShader CreateTwoPointConicalGradient (SkiaSharp.SKPoint start, float startRadius, SkiaSharp.SKPoint end, float endRadius, SkiaSharp.SKColorF[] colors, SkiaSharp.SKColorSpace colorspace, float[] colorPos, SkiaSharp.SKShaderTileMode mode, SkiaSharp.SKMatrix localMatrix);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class SkiaSharp.SKShader CreateTwoPointConicalGradient(valuetype SkiaSharp.SKPoint start, float32 startRadius, valuetype SkiaSharp.SKPoint end, float32 endRadius, valuetype SkiaSharp.SKColorF[] colors, class SkiaSharp.SKColorSpace colorspace, float32[] colorPos, valuetype SkiaSharp.SKShaderTileMode mode, valuetype SkiaSharp.SKMatrix localMatrix) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKShader.CreateTwoPointConicalGradient(SkiaSharp.SKPoint,System.Single,SkiaSharp.SKPoint,System.Single,SkiaSharp.SKColorF[],SkiaSharp.SKColorSpace,System.Single[],SkiaSharp.SKShaderTileMode,SkiaSharp.SKMatrix)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.68.0.0</AssemblyVersion>
        <AssemblyVersion>2.80.0.0</AssemblyVersion>
        <AssemblyVersion>2.88.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>SkiaSharp.SKShader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="start" Type="SkiaSharp.SKPoint" Index="0" FrameworkAlternate="skiasharp-1.68;skiasharp-2.80;skiasharp-2.88" />
        <Parameter Name="startRadius" Type="System.Single" Index="1" FrameworkAlternate="skiasharp-1.68;skiasharp-2.80;skiasharp-2.88" />
        <Parameter Name="end" Type="SkiaSharp.SKPoint" Index="2" FrameworkAlternate="skiasharp-1.68;skiasharp-2.80;skiasharp-2.88" />
        <Parameter Name="endRadius" Type="System.Single" Index="3" FrameworkAlternate="skiasharp-1.68;skiasharp-2.80;skiasharp-2.88" />
        <Parameter Name="colors" Type="SkiaSharp.SKColorF[]" Index="4" FrameworkAlternate="skiasharp-1.68;skiasharp-2.80;skiasharp-2.88" />
        <Parameter Name="colorspace" Type="SkiaSharp.SKColorSpace" Index="5" FrameworkAlternate="skiasharp-1.68;skiasharp-2.80;skiasharp-2.88" />
        <Parameter Name="colorPos" Type="System.Single[]" Index="6" FrameworkAlternate="skiasharp-1.68;skiasharp-2.80;skiasharp-2.88" />
        <Parameter Name="mode" Type="SkiaSharp.SKShaderTileMode" Index="7" FrameworkAlternate="skiasharp-1.68;skiasharp-2.80;skiasharp-2.88" />
        <Parameter Name="localMatrix" Type="SkiaSharp.SKMatrix" Index="8" FrameworkAlternate="skiasharp-1.68;skiasharp-2.80;skiasharp-2.88" />
      </Parameters>
      <Docs>
        <param name="start">To be added.</param>
        <param name="startRadius">To be added.</param>
        <param name="end">To be added.</param>
        <param name="endRadius">To be added.</param>
        <param name="colors">To be added.</param>
        <param name="colorspace">To be added.</param>
        <param name="colorPos">To be added.</param>
        <param name="mode">To be added.</param>
        <param name="localMatrix">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKShader.Dispose(System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.60.0.0</AssemblyVersion>
        <AssemblyVersion>1.68.0.0</AssemblyVersion>
        <AssemblyVersion>2.80.0.0</AssemblyVersion>
        <AssemblyVersion>2.88.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</param>
        <summary>Releases the unmanaged resources used by the <see cref="T:SkiaSharp.SKShader" /> and optionally releases the managed resources.</summary>
        <remarks>Always dispose the object before you release your last reference to the <see cref="T:SkiaSharp.SKShader" />. Otherwise, the resources it is using will not be freed until the garbage collector calls the finalizer.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WithColorFilter">
      <MemberSignature Language="C#" Value="public SkiaSharp.SKShader WithColorFilter (SkiaSharp.SKColorFilter filter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class SkiaSharp.SKShader WithColorFilter(class SkiaSharp.SKColorFilter filter) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKShader.WithColorFilter(SkiaSharp.SKColorFilter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.68.0.0</AssemblyVersion>
        <AssemblyVersion>2.80.0.0</AssemblyVersion>
        <AssemblyVersion>2.88.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>SkiaSharp.SKShader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filter" Type="SkiaSharp.SKColorFilter" Index="0" FrameworkAlternate="skiasharp-1.68;skiasharp-2.80;skiasharp-2.88" />
      </Parameters>
      <Docs>
        <param name="filter">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WithLocalMatrix">
      <MemberSignature Language="C#" Value="public SkiaSharp.SKShader WithLocalMatrix (SkiaSharp.SKMatrix localMatrix);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class SkiaSharp.SKShader WithLocalMatrix(valuetype SkiaSharp.SKMatrix localMatrix) cil managed" />
      <MemberSignature Language="DocId" Value="M:SkiaSharp.SKShader.WithLocalMatrix(SkiaSharp.SKMatrix)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>SkiaSharp</AssemblyName>
        <AssemblyVersion>1.68.0.0</AssemblyVersion>
        <AssemblyVersion>2.80.0.0</AssemblyVersion>
        <AssemblyVersion>2.88.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>SkiaSharp.SKShader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localMatrix" Type="SkiaSharp.SKMatrix" Index="0" FrameworkAlternate="skiasharp-1.68;skiasharp-2.80;skiasharp-2.88" />
      </Parameters>
      <Docs>
        <param name="localMatrix">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
